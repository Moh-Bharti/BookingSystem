<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Eclipse Announcements: EclipseCon + Ludwigsburg = Great Partners</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/-CwiYa7LmO0/eclipsecon-ludwigsburg-great-partners</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/-CwiYa7LmO0/eclipsecon-ludwigsburg-great-partners</link>
	<description>We are pleased to announce a strategic partnership between the Eclipse Foundation Europe and the City of Ludwigsburg that keeps EclipseCon Europe at the Forum am Schlosspark through 2019.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/-CwiYa7LmO0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 22 Oct 2017 13:00:00 +0000</pubDate>
</item>
<item>
	<title>EclipseCon Europe 2017: EclipseCon + Ludwigsburg = Great Partners</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/europe2017/news/3158 at https://www.eclipsecon.org/europe2017</guid>
	<link>https://www.eclipsecon.org/europe2017/news/eclipsecon-ludwigsburg-great-partners</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt; We are pleased to announce a strategic partnership between the Eclipse Foundation Europe and the City of Ludwigsburg that keeps EclipseCon Europe at the Forum am Schlosspark through 2019.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/news/eclipsecon-ludwigsburg-great-partners&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/europe2017/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/ralph_esther.jpg?itok=YSa-X-6L&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Sun, 22 Oct 2017 08:00:35 +0000</pubDate>
</item>
<item>
	<title>Andy Clement: AspectJ 1.8.12 - Faster Spring AOP</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-4252978514266184993.post-6365094957578829373</guid>
	<link>http://andrewclement.blogspot.com/2017/10/aspectj-1812-faster-spring-aop.html</link>
	<description>&lt;p&gt;AspectJ 1.8.12 is now out. It is actually hot on the heels of 1.8.11. That previous release was really just about doing some Java 9 toleration in the 1.8 line. 1.8.12 includes some real changes that have been brewing for a while but were a bit too radical to rush into 1.8.11.  &lt;/p&gt;&lt;p&gt;The aim here is to speed up Spring AOP - or really any system that consumes AspectJ like Spring does. Instead of just using the weaver as-is, Spring uses the pointcut parser and matcher independently of the weaver (unless LTW).  Typically when used as a whole, the matching and weaving is all underpinned by type information parsed from class files.  There are alternative ways to get that type information and Spring, when consuming just the parser and matcher, actually uses a Java reflection driven system.  &lt;/p&gt;&lt;p&gt;What drove interest in doing something here is when Dave Syer from the Spring team recently created a series of benchmarks for checking the speed of Spring-AspectJ:  &lt;tt&gt;&lt;a href=&quot;https://github.com/dsyer/spring-boot-aspectj&quot;&gt;https://github.com/dsyer/spring-boot-aspectj&lt;/a&gt;&lt;/tt&gt; &lt;/p&gt;&lt;p&gt;Here is a run of those on 1.8.11 (on my macbook pro).  For this set I actually added one extra case beyond the standard benchmark (the a20_100) case:  &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;Benchmark                 (scale)  Mode  Cnt   Score   Error  Units&lt;br /&gt;StartupBenchmark.ltw          N/A  avgt   10   2.656 ~ 0.166   s/op&lt;br /&gt;StartupBenchmark.ltw_100      N/A  avgt   10   2.618 ~ 0.063   s/op&lt;br /&gt;StartupBenchmark.spring     v0_10  avgt   10   2.071 ~ 0.044   s/op&lt;br /&gt;StartupBenchmark.spring     v1_10  avgt   10   2.210 ~ 0.058   s/op&lt;br /&gt;StartupBenchmark.spring    v1_100  avgt   10   2.260 ~ 0.068   s/op&lt;br /&gt;StartupBenchmark.spring    v10_50  avgt   10   2.933 ~ 0.039   s/op&lt;br /&gt;StartupBenchmark.spring    v20_50  avgt   10   3.832 ~ 0.094   s/op&lt;br /&gt;StartupBenchmark.spring   v20_100  avgt   10   3.959 ~ 0.047   s/op&lt;br /&gt;StartupBenchmark.spring     a0_10  avgt   10   2.073 ~ 0.028   s/op&lt;br /&gt;StartupBenchmark.spring     a1_10  avgt   10   2.729 ~ 0.061   s/op&lt;br /&gt;StartupBenchmark.spring    a1_100  avgt   10   2.750 ~ 0.029   s/op&lt;br /&gt;StartupBenchmark.spring    a10_50  avgt   10   7.153 ~ 0.075   s/op&lt;br /&gt;StartupBenchmark.spring   a10_100  avgt   10   7.152 ~ 0.059   s/op&lt;br /&gt;StartupBenchmark.spring    a20_50  avgt   10  11.430 ~ 0.105   s/op&lt;br /&gt;StartupBenchmark.spring   a20_100  avgt   10  11.497 ~ 0.162   s/op&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is the average *startup time* of an app affected by aspects applying to the beans involved.  So this is not about the impact of AOP when the system is up and running, just about the impact of parsing pointcuts and matching join points on the startup of the application.  &lt;/p&gt;&lt;p&gt;Where numbers are referenced above the first is the number of aspects/pointcuts (there is one pointcut per aspect) and the second is the number of beans.  The 'a' indicates an annotation based pointcut vs a non-annotation  based pointcut ('v'). It is pretty obvious that the performance of annotation based pointcuts is not great - it scales really badly. At 20 pointcuts and 50 beans the app is 9 seconds slower to startup! &lt;br /&gt; &lt;/p&gt;&lt;p&gt;The key change in 1.8.12 (and 1.9.0) is to recognize that it seems much more common to use annotations with runtime retention than those with just class retention, at least in most situations that I've seen (and the benchmarks here). Retrieving annotations with class retention is costly because we must open the bytes for the class file and dig around in there, as opposed to those with runtime retention which are easily accessible simply using Java reflection.  &lt;/p&gt;&lt;p&gt;Now, if you need all the annotations, we must do that digging but there are situations in matching where we know exactly the annotation we are looking for - and if we know that, we know whether it has class or runtime retention. Until now we haven't been making this distinction when looking for them and always fetching them all. In 1.8.12 we are smarter and avoid having to locate and parse the class file unless necessary. There is also some deeper work in 1.8.12 related to activating caches that were not previously being used correctly but the primary change is factoring in the annotation retention.  &lt;/p&gt;&lt;p&gt;What difference does that make?  AspectJ 1.8.12: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;Benchmark                 (scale)  Mode  Cnt  Score   Error  Units&lt;br /&gt;StartupBenchmark.ltw          N/A  avgt   10  2.620 ~ 0.130   s/op&lt;br /&gt;StartupBenchmark.ltw_100      N/A  avgt   10  2.567 ~ 0.038   s/op&lt;br /&gt;StartupBenchmark.spring     v0_10  avgt   10  2.044 ~ 0.027   s/op&lt;br /&gt;StartupBenchmark.spring     v1_10  avgt   10  2.195 ~ 0.026   s/op&lt;br /&gt;StartupBenchmark.spring    v1_100  avgt   10  2.237 ~ 0.039   s/op&lt;br /&gt;StartupBenchmark.spring    v10_50  avgt   10  2.774 ~ 0.038   s/op&lt;br /&gt;StartupBenchmark.spring    v20_50  avgt   10  3.488 ~ 0.116   s/op&lt;br /&gt;StartupBenchmark.spring   v20_100  avgt   10  3.642 ~ 0.080   s/op&lt;br /&gt;StartupBenchmark.spring     a0_10  avgt   10  2.067 ~ 0.034   s/op&lt;br /&gt;StartupBenchmark.spring     a1_10  avgt   10  2.159 ~ 0.030   s/op&lt;br /&gt;StartupBenchmark.spring    a1_100  avgt   10  2.207 ~ 0.020   s/op&lt;br /&gt;StartupBenchmark.spring    a10_50  avgt   10  2.471 ~ 0.031   s/op&lt;br /&gt;StartupBenchmark.spring   a10_100  avgt   10  2.517 ~ 0.045   s/op&lt;br /&gt;StartupBenchmark.spring    a20_50  avgt   10  2.842 ~ 0.049   s/op&lt;br /&gt;StartupBenchmark.spring   a20_100  avgt   10  2.916 ~ 0.145   s/op&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Look at the a20_100 case - instead of impacting start time by 9 seconds, it impacts it by 1 second.  &lt;/p&gt;&lt;p&gt;In fact those numbers look too good to be true... which worries me a bit! So if you are reading this and using Spring AOP, please kick the tires on this 1.8.12 release and raise any issues on our &lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=AspectJ&quot;&gt;Bugzilla&lt;/a&gt;.  &lt;/p&gt;&lt;p&gt;Barring any unexpected regressions this will be the final release of 1.8.12 and 1.9.0 is next.&lt;/p&gt;</description>
	<pubDate>Sat, 21 Oct 2017 05:02:27 +0000</pubDate>
	<author>noreply@blogger.com (Andy Clement)</author>
</item>
<item>
	<title>Donald Raab: A rose by any other name…</title>
	<guid isPermaLink="false">https://medium.com/p/e15060d4c98e</guid>
	<link>https://medium.com/@donraab/a-rose-by-any-other-name-e15060d4c98e?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Similar iteration patterns, different naming patterns.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*x49MEzleCKcQH17bz74TnA.jpeg&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*H5jdq8b9yMyn4ak9sotgVQ.png&quot; /&gt;A Rosetta Stone for Smalltalk, Eclipse Collections and Java 8 Streams&lt;/figure&gt;&lt;p&gt;I used this slide at JavaOne 2017 in a talk titled &lt;strong&gt;&lt;em&gt;API Deep Dive: Designing Eclipse Collections&lt;/em&gt;&lt;/strong&gt; [CON6133] which I presented with Nikhil Nanivadekar. This is a translation guide for iteration pattern names between Smalltalk, Eclipse Collections and Java 8 Streams.&lt;/p&gt;&lt;p&gt;As I pointed out in the talk, I chose Smalltalk as the source of inspiration for the names of the basic iteration patterns in &lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;If you know Smalltalk, learning Eclipse Collections just requires you to learn the syntax and types of the Java language. You will already be familiar with the iteration patterns. If you know Java 8 Streams, learning Eclipse Collections will require you to add nine synonyms to your vocabulary for common iteration patterns. Three of these patterns start with the same prefix (any/all/none), and differ only in the suffix (Satisfy vs. Match). That’s an easy place to get started. Now you only have to learn six new names to become as fluent in the basic iteration patterns of Eclipse Collections as you are in Java 8 Streams. Eclipse Collections types allow you to use the API directly on collections without having to call the “bun” operations (e.g. .stream().something().collect()). You can also use the Streams API if you want to with Eclipse Collections types. You get to choose whichever option you like best.&lt;/p&gt;&lt;p&gt;Let’s learn the iteration pattern synonyms by example. The following examples will be based on the Eclipse Collections &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/pet-kata/#/&quot;&gt;Pet Kata&lt;/a&gt; domain.&lt;/p&gt;&lt;h4&gt;Select / Filter&lt;/h4&gt;&lt;p&gt;If you want to include items of a collection that satisfy a given condition (&lt;em&gt;Predicate&lt;/em&gt;) you use &lt;strong&gt;&lt;em&gt;select&lt;/em&gt;&lt;/strong&gt; (EC) or &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; (Streams). Eclipse Collections also has &lt;strong&gt;“With”&lt;/strong&gt; versions of the iteration patterns that allow for more usages of method references.&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (Select)&lt;br /&gt;&lt;/strong&gt;MutableList&amp;lt;Person&amp;gt; peopleWithCats =&lt;br /&gt;        this.people.select(person -&amp;gt; person.hasPet(PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;));&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (SelectWith) &lt;br /&gt;&lt;/strong&gt;MutableList&amp;lt;Person&amp;gt; peopleWithCats =&lt;br /&gt;        this.people.selectWith(Person::hasPet, PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Streams (Filter)&lt;br /&gt;&lt;/strong&gt;List&amp;lt;Person&amp;gt; peopleWithCats =&lt;br /&gt;        this.people.stream()&lt;br /&gt;                   .filter(person -&amp;gt; person.hasPet(PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;))&lt;br /&gt;                   .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;/pre&gt;&lt;h4&gt;Reject / Filter (!)&lt;/h4&gt;&lt;p&gt;If you want to exclude items of a collection that satisfy a given condition (&lt;em&gt;Predicate&lt;/em&gt;) you use &lt;strong&gt;&lt;em&gt;reject&lt;/em&gt;&lt;/strong&gt; (EC) or &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; (Streams) with a negation of the predicate.&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (Reject)&lt;br /&gt;&lt;/strong&gt;MutableList&amp;lt;Person&amp;gt; peopleWithoutCats =&lt;br /&gt;        this.people.reject(person -&amp;gt; person.hasPet(PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;));&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (RejectWith) &lt;br /&gt;&lt;/strong&gt;MutableList&amp;lt;Person&amp;gt; peopleWithoutCats =&lt;br /&gt;        this.people.rejectWith(Person::hasPet, PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Streams (Filter !)&lt;br /&gt;&lt;/strong&gt;List&amp;lt;Person&amp;gt; peopleWithoutCats =&lt;br /&gt;        this.people.stream()&lt;br /&gt;                   .filter(person -&amp;gt; !person.hasPet(PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;))&lt;br /&gt;                   .collect(Collectors.&lt;em&gt;toList&lt;/em&gt;());&lt;/pre&gt;&lt;h4&gt;Collect / Map&lt;/h4&gt;&lt;p&gt;If you want to transform a collection of one type to a collection of another type, you use &lt;strong&gt;&lt;em&gt;collect&lt;/em&gt;&lt;/strong&gt; (EC) or &lt;strong&gt;&lt;em&gt;map&lt;/em&gt;&lt;/strong&gt; (Streams) with a &lt;em&gt;Function&lt;/em&gt;. There is a method named &lt;strong&gt;&lt;em&gt;collect&lt;/em&gt;&lt;/strong&gt; on Streams as well, but it means something different. It is referred to as a mutable reduction. What is reduces to is up to you, so the return type of the Stream version of collect is defined by the &lt;em&gt;Collector&lt;/em&gt; you give it. I wish the name of the method was different (aka. mutableReduce). C’est la vie.&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections&lt;br /&gt;&lt;/strong&gt;MutableList&amp;lt;String&amp;gt; firstNames =&lt;br /&gt;        this.people.collect(Person::getFirstName);&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Streams&lt;br /&gt;&lt;/strong&gt;MutableList&amp;lt;String&amp;gt; firstNames =&lt;br /&gt;      this.people.stream()&lt;br /&gt;                 .map(Person::getFirstName)&lt;br /&gt;                 .collect(Collectors2.&lt;em&gt;toList&lt;/em&gt;());&lt;/pre&gt;&lt;p&gt;I used Collectors2 in the above example to show you that you can also return Eclipse Collections types using Streams if you want to as well.&lt;/p&gt;&lt;h4&gt;FlatCollect / FlatMap&lt;/h4&gt;&lt;p&gt;If you want to transform a collection of collections to a single collection of another type, you use &lt;strong&gt;&lt;em&gt;flatCollect&lt;/em&gt;&lt;/strong&gt; (EC) or &lt;strong&gt;&lt;em&gt;flatMap&lt;/em&gt;&lt;/strong&gt; (Streams) with a &lt;em&gt;Function&lt;/em&gt; that either returns an &lt;em&gt;Iterable&lt;/em&gt; (EC) or a &lt;em&gt;Stream&lt;/em&gt; (Streams).&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (FlatCollect - Eager)&lt;br /&gt;&lt;/strong&gt;MutableSet&amp;lt;PetType&amp;gt; petTypes = &lt;br /&gt;        this.people.flatCollect(Person::getPetTypes)&lt;br /&gt;                   .toSet();&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (FlatCollect - Lazy)&lt;br /&gt;&lt;/strong&gt;MutableSet&amp;lt;PetType&amp;gt; petTypes = &lt;br /&gt;        this.people.asLazy()&lt;br /&gt;                   .flatCollect(Person::getPetTypes)&lt;br /&gt;                   .toSet();&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Streams&lt;br /&gt;&lt;/strong&gt;MutableSet&amp;lt;PetType&amp;gt; petTypes = &lt;br /&gt;        this.people.stream()&lt;br /&gt;                   .flatMap(person -&amp;gt; person.getPetTypes().stream())&lt;br /&gt;                   .collect(Collectors2.&lt;em&gt;toSet&lt;/em&gt;());&lt;/pre&gt;&lt;p&gt;In this example, I also show that you can choose either Eclipse Collections eager API (EC is eager by default), or you can save creating a temporary collection by using the lazy API. The &lt;strong&gt;&lt;em&gt;asLazy()&lt;/em&gt;&lt;/strong&gt; call will return a &lt;strong&gt;&lt;em&gt;LazyIterable&lt;/em&gt;&lt;/strong&gt; which has the same protocols available. The return type for &lt;strong&gt;&lt;em&gt;flatCollect&lt;/em&gt;&lt;/strong&gt; will change from &lt;strong&gt;&lt;em&gt;MutableList&lt;/em&gt;&lt;/strong&gt; in the first example to &lt;strong&gt;&lt;em&gt;LazyIterable&lt;/em&gt;&lt;/strong&gt; in the second. A &lt;strong&gt;&lt;em&gt;LazyIterable&lt;/em&gt;&lt;/strong&gt; is reusable (it is an &lt;strong&gt;&lt;em&gt;Iterable&lt;/em&gt;&lt;/strong&gt;), unlike a &lt;strong&gt;&lt;em&gt;Stream&lt;/em&gt;&lt;/strong&gt; which can only be used once (a &lt;strong&gt;&lt;em&gt;Stream&lt;/em&gt;&lt;/strong&gt; is like an &lt;strong&gt;&lt;em&gt;Iterator&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;&lt;h4&gt;Detect / Filter + FindFirst + Get&lt;/h4&gt;&lt;p&gt;If you want to return the first element of a collection which matches a given condition (&lt;em&gt;Predicate&lt;/em&gt;), you use &lt;strong&gt;&lt;em&gt;detect&lt;/em&gt;&lt;/strong&gt; (EC) or &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;em&gt;findFirst&lt;/em&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;em&gt;get&lt;/em&gt;&lt;/strong&gt; (Streams). If you want to return an optional value representing either the first item that matches the condition or null, you can use &lt;strong&gt;&lt;em&gt;detectOptional&lt;/em&gt;&lt;/strong&gt; (EC) or &lt;strong&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/strong&gt; + &lt;strong&gt;&lt;em&gt;findFirst&lt;/em&gt;&lt;/strong&gt; (Streams).&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (DetectWith)&lt;br /&gt;&lt;/strong&gt;Person firstPersonWithCat = &lt;br /&gt;        this.people.detectWith(Person::hasPet, PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collection (DetectWithOptional)&lt;br /&gt;&lt;/strong&gt;Optional&amp;lt;Person&amp;gt; optionalFirstPerson = &lt;br /&gt;        this.people.detectWithOptional(Person::hasPet, PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Streams (Filter + FindFirst + Get)&lt;br /&gt;&lt;/strong&gt;Person firstPersonWithCat = &lt;br /&gt;        this.people.stream()&lt;br /&gt;                   .filter(person -&amp;gt; person.hasPet(PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;))&lt;br /&gt;                   .findFirst();&lt;br /&gt;                   .get();&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Streams (Filter + FindFirst)&lt;br /&gt;&lt;/strong&gt;Optional&amp;lt;Person&amp;gt; personOptional =&lt;br /&gt;        this.people.stream()&lt;br /&gt;                   .filter(person -&amp;gt; person.hasPet(PetType.&lt;strong&gt;&lt;em&gt;CAT&lt;/em&gt;&lt;/strong&gt;))&lt;br /&gt;                   .findFirst();&lt;/pre&gt;&lt;h4&gt;InjectInto / Reduce&lt;/h4&gt;&lt;p&gt;If you want to inject an initial value into a function that then injects the result of each application of the function into the next iteration, you can use &lt;strong&gt;&lt;em&gt;injectInto&lt;/em&gt;&lt;/strong&gt; (EC) or &lt;strong&gt;&lt;em&gt;reduce&lt;/em&gt;&lt;/strong&gt; (Streams). This is probably the hardest method to understand, but has the easiest examples. You can use this method to calculate sum, min, max, product, etc.&lt;/p&gt;&lt;pre&gt;&lt;strong&gt;// Eclipse Collections (InjectInto)&lt;br /&gt;&lt;/strong&gt;int numberOfPets = &lt;br /&gt;        this.people.collectInt(Person::getNumberOfPets)&lt;br /&gt;                   .injectInto(0, Integer::&lt;em&gt;sum&lt;/em&gt;);&lt;/pre&gt;&lt;pre&gt;&lt;strong&gt;// Streams (Reduce)&lt;br /&gt;&lt;/strong&gt;int numberOfPets =&lt;br /&gt;        this.people.stream()&lt;br /&gt;                   .mapToInt(Person::getNumberOfPets)&lt;br /&gt;                   .reduce(0, Integer::&lt;em&gt;sum&lt;/em&gt;);&lt;/pre&gt;&lt;p&gt;I hope this translation guide of basic iteration patterns will be helpful for developers who want to learn Eclipse Collections and are either familiar with the names used with Java 8 Streams or the names used with Smalltalk.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=e15060d4c98e&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 21 Oct 2017 04:03:06 +0000</pubDate>
</item>
<item>
	<title>itemis: Eclipse Xtext 2.13 is released!</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/eclipse-xtext-2.13-is-released</guid>
	<link>https://blogs.itemis.com/en/eclipse-xtext-2.13-is-released</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Right on time for &lt;/span&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/&quot;&gt;&lt;span&gt;EclipseCon Europe&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; the Xtext project managed to release its new version 2.13. Xtext 2.13 is the first version for the Eclipse Photon simultaneous release and was designed to fit well with the &lt;/span&gt;&lt;a href=&quot;https://jaxenter.com/eclipse-oxygen-1a-java-9-junit-5-138113.html&quot;&gt;&lt;span&gt;recently released Eclipse Oxygen.1a&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; version. For users of older Eclipse versions, Xtext remains compatible back to Eclipse Luna.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;whats-new.jpg&quot; height=&quot;345&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/whats-new.jpg?t=1508515820696&amp;amp;width=724&amp;amp;height=345&amp;amp;name=whats-new.jpg&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext's New Project Wizard: Option to build Language Server Support&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We have enhanced Xtext’s New Project Wizard, which now adds an option to build Language Server packages for languages created with Xtext. The wizard will enhance the build scripts to produce the packages, which can be integrated with any tool that supports language integration through the &lt;/span&gt;&lt;a href=&quot;https://github.com/Microsoft/language-server-protocol&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Language Server Protocol&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (LSP), e.g. &lt;/span&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;VS Code&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and others.&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;Xtext-Release-new-project-language-server-protocol.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-Release-new-project-language-server-protocol.png?t=1508515820696&amp;amp;width=640&amp;amp;name=Xtext-Release-new-project-language-server-protocol.png&quot; style=&quot;width: 640px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;640&quot; /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Users can choose between a Fat Jar packaging, which packages the DSL and all required dependencies into a single executable jar, or a “Regular” format, which will have each jar on its own and includes launch scripts for the language server. A basic language server package is around 13 MB size, more depends on a DSLs individual dependencies.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The full support of the LSP is still on top of Xtext’s agenda. With this release will finally get support for &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;rename refactoring&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.13: Quality, stability, robustness&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The processed bugs of a release are often just a link to a list in the release notes. But it should be worth to mention that this is the most important and least thankful job to keep a project alive and kicking.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://twitter.com/ftomasse/status/913123924044648448&quot;&gt;&lt;img alt=&quot;federico-tomassetti-quote-twitter.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/federico-tomassetti-quote-twitter.png?t=1508515820696&amp;amp;width=360&amp;amp;name=federico-tomassetti-quote-twitter.png&quot; style=&quot;width: 360px; margin: 0px 10px 10px 0px; float: left;&quot; width=&quot;360&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;It is especially Christian Dietrich’s invaluable work that is addressing the problems that real users have out there, on the support forum and by fixing bugs. Also I am continuously working down the “big pile of shit”. That might not be the fun work, but it is crucial for the project’s health.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;br /&gt;We have focussed also on issues that are reported to Eclipse’s &lt;/span&gt;&lt;a href=&quot;https://www.codetrails.com/error-analytics/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Automatic Error Reporting System&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (AERI), where actual problems are reported by users automatically. You might have noticed in Eclipse this feature when a pop up message appears in Eclipse’s lower right corner and asks you to send to report when something goes wrong. These reports are very important to us, and we are analyzing them continuously.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With this release we finally managed to reach a break even point where we don’t get more reports inside than we are able to process. And for some weeks we are even not getting new requests, and fight against the remaining ones.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As of today, Xtext has only about 10% of the reports open, and I believe this is a top quota. I believe that Xtext is amongst the most active projects using AERI at Eclipse.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-problem-status-report.png&quot; height=&quot;398&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-problem-status-report.png?t=1508515820696&amp;amp;width=572&amp;amp;height=398&amp;amp;name=Xtext-problem-status-report.png&quot; style=&quot;display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;572&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;New Xbase Library Functions&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A new &lt;/span&gt;&lt;code&gt;flatMap()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; function has been added to Xtext’s library bundle &lt;/span&gt;&lt;code&gt;org.eclipse.xtext.xbase.lib&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It combines &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;map&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; with &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;flatten&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, a likely combination in functional programming.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Further mutable collection literals finally get no-args factory methods in class &lt;/span&gt;&lt;code&gt;CollectionLiterals&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Usage of these methods yield better performance, and Xtext’s code has been refactored to use these methods.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;New Model Manipulation API&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Synchronization of text with the EMF resources is one of the magic things Xtext is doing for you without usually noticing it. For advanced users who need to influence the process of changes to the EMF model, there is now a new API. Its core concept is the &lt;/span&gt;&lt;code&gt;IChangeSerializer&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; interface.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This API is still in incubation status, so we expect that it might change later. For the rare case that you might need this API, please give feedback so that we can improve it.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The road to Eclipse Photon&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.13 is our first milestone towards the Eclipse Photon simultaneous release. As of today we plan to deliver Xtext 2.15 for this release in June 2018, so there is likely another release in between.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our focus at itemis will be on language server, Java 9, usability and performance. We have found first issues with Java 9 and are still getting more insights with it, but could not solve all of them for 2.13 already. We warmly encourage you to provide feedback or even contributions. To ease your contribution, we polished our &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/xtext/blob/master/CONTRIBUTING.md#set-up-your-eclipse-workspace&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Oomph Setup&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, so that setting up a fully working dev workspace is a matter of coffee drinking.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As Xtext is a non-trivial framework, so it is important to us to lower the hurdle to use it as much as possible. We expect to add more features for build, Xtext’s UI (e.g. wizards), and documentation. Therefore we listen to requirements users have or what we need in concrete projects. Also here, your input is valuable to us.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext @ EclipseCon Europe 2017&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The complete itemis Xtext team will be at &lt;/span&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EclipseCon Europe in Ludwigsburg next week&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. All of us have multiple talks there, and some are Xtext related. If you can make it to ECE 2017, make sure to come to our talks. We will often hang around the itemis booth in front of the Theater, and would happily talk with you about your experience and ideas on Xtext. It is YOU that can shape the future of Xtext! We will help you wherever we can.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;TL;DR&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.13 was released on October 20th 2017. The release’s main new features are enhanced Language Server Support, additional library functions and an API for EMF model manipulation. With this release Xtext has improved much on stability again, and is one of the projects with highest AERI problem report fixing rate at Eclipse. Future focus for Eclipse Photon are language servers, usability and scalability.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.13 is available now on the &lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/releases/&quot;&gt;release update site&lt;/a&gt;. Download now and enjoy! Read the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;full &lt;a href=&quot;https://github.com/eclipse/xtext/blob/website-master/xtext-website/_posts/releasenotes/2017-10-20-version-2-13-0.md&quot;&gt;release notes here&lt;/a&gt;.&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Feclipse-xtext-2.13-is-released&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 20 Oct 2017 16:04:30 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>
<item>
	<title>typefox.io: Xtext 2.13.0 Released: Semantic Editing Made Easy</title>
	<guid isPermaLink="false">http://typefox.io/?p=14458</guid>
	<link>http://typefox.io/xtext-2-13-0-released-semantic-editing-made-easy</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 20px; padding-right: 0px; padding-bottom: 20px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 20px;&quot;&gt;
			&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
				&lt;p&gt;Today we are excited to release Xtext 2.13.0 and I would like to give you an opinionated tour through some of the new features. There is one area where particularly much happened: Refactoring support and QuickFix support. I wan to thank Jan and Dennis for implementing significant parts of it. Refactoring and QuickFix are similar: They take the DSL documents and turn them into some improved version of themselves. While refactoring focusses on restructuring, QuickFixes focus on resolving problems. The modifications applied to the DSL documents can range from very simple cases like updating an attribute’s value to complex cases such as renaming or moving multiple elements at once. To implement an operation like this, in the past, it was either necessary to obtain tokens from the node model and directly modify the text or obtain the AST and serialize the modified subtree. Unfortunately, both approaches have drawbacks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changing text directly, even with the help of the node model, is only practical for small changes and insertions. Your language’s formatter is not used and syntactic correctness of the change is your very own responsibility.&lt;/li&gt;
&lt;li&gt;Neither approach can detect and update cross references that point to the modified piece of the text or AST.&lt;/li&gt;
&lt;li&gt;The serialization approach is too fragile to work with broken models since it needs to re-serialize the full sub-tree of the modified element. Unfortunately, since we’re working with text that’s being edited by a human, broken models are more common than valid ones.&lt;/li&gt;
&lt;li&gt;And more.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ChangeSerializer: Engine for Semantic Editing&lt;/h2&gt;
&lt;p&gt;So we spend lots of thought on how Xtext could provide hooks where all you need to do is to update your AST (the EMF model) and Xtext will take care of updating the textual DSL documents. The result is an amazingly simple service:&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;public interface IChangeSerializer {
  
  interface IModification&amp;lt;T extends Notifier&amp;gt; {
      void modify(T context);
  }
  
  &amp;lt;T extends Notifier&amp;gt; void addModification(T context, IModification&amp;lt;T&amp;gt; modification);
  void applyModifications(IAcceptor&amp;lt;IEmfResourceChange&amp;gt; acceptor);
  void setUpdateCrossReferences(boolean value);
  void setUpdateRelatedFiles(boolean value);
  
  // (...)
}&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
  To use this service, first, you call &lt;code&gt;addModification(context, modification)&lt;/code&gt; one or multiple times. The parameter &lt;code&gt;context&lt;/code&gt; is the EMF &lt;code&gt;Resource&lt;/code&gt; or &lt;code&gt;EObject&lt;/code&gt; that (children included) you want to modify. The parameter &lt;code&gt;modification&lt;/code&gt; is an object or a lambda that executes the modification.
&lt;/p&gt;
&lt;p&gt;
When all modification have been added, it is time to call &lt;code&gt;applyModifications(acceptor)&lt;/code&gt;. With &lt;code&gt;acceptor&lt;/code&gt;, you provide a call-back that will be called once for every EMF Resource that needs to be changed. For XtextResources, you’ll get instances of&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;public interface ITextDocumentChange extends IEmfResourceChange {
  URI getOldURI();
  URI getNewURI();
  XtextResource getResource();
  List&amp;lt;ITextReplacement&amp;gt; getReplacements();
}&lt;/pre&gt;&lt;p&gt;
As promised, this gives the all &lt;code&gt;ITextReplacement&lt;/code&gt;s that are needed to apply the model change back to the textual DSL documents. A lot is being considered during this process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The changes are kept as minimal as possible. For example, when only the value of a single EAttribute is changed, only the EAttributes text region will be updated. This keeps serialization robust in times of broken models. To add new EObjects or to handle very complicated changes, the ChangeSerializer will delegate to &lt;code&gt;ISerializer&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Modifications can occur in one or many files at the same time. This feature is important because often files are interconnected via cross references and therefore it can be impossible to treat the individually.&lt;/li&gt;
&lt;li&gt;XtextResources and other EMF resources can be mixed. For example, XML or XMI resources can be involved.
&lt;/li&gt;&lt;li&gt;Cross references are updated automatically when &lt;code&gt;setUpdateCrossReferences(true)&lt;/code&gt; has been set. We build in this feature because we realized that more advanced modifications often involve many rename-refactorings.
&lt;/li&gt;
&lt;li&gt;Related files are automatically detected and updated, when &lt;code&gt;setUpdateRelatedFiles(true)&lt;/code&gt; has been called. Related files are the ones for which there is no explicit modification, but which contain cross references that need to be updated. Related files are determined using Xtext’s index.
&lt;/li&gt;
&lt;li&gt;There is a hook to update the model of related files, for example to update a section of import statements.&lt;/li&gt;
&lt;li&gt;Code comments are handled properly by being moved/deleted according to how the associated model elements are moved/deleted.
&lt;/li&gt;&lt;li&gt;Transactional model modification: Since all changes are computed before they are applied, a modification can be aborted at any time withour having caused side-effects.&lt;/li&gt;
&lt;li&gt;Your &lt;code&gt;IFormatter2&lt;/code&gt; is called for all model modifications. Thus, the resulting text changes are always nicely formatted according to how you implemented your formatter.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;IChangeSerializer&lt;/code&gt; is part of xtext.ide and therefore available on all platforms supported by Xtext: Language Server Protocol, Eclipse IDE, etc.&lt;/p&gt;
&lt;h2&gt;File/Folder Copy/Move/Rename Refactoring&lt;/h2&gt;
&lt;p&gt;In short: Resource Relocation Refactoring.&lt;/p&gt;
&lt;p&gt; The motivation behind this refactoring is the fact that many languages support syntactical elements that directly relate to the structure of the file system: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java-style package names: By definition symmetric to the file’s path within the source folder.&lt;/li&gt;
&lt;li&gt;C-style import statements: They’re like cross references pointing to file names.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
If the file structure is changed by renaming files or folders or by moving them around, the contents of one or more files needs to be updated. A perfect case for the change serializer! Also, when a file it copied it must have a different path/name compared to the original, thus making file contents changes necessary.
&lt;/p&gt;
&lt;p&gt;
Implementing such a hook is spectacularly simple:
&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;class MyStrategy implements IResourceRelocationStrategy {

  @Inject IResourceServiceProvider language

  override applyChange(ResourceRelocationContext context) {
    context.changes.filter[language.canHandle(fromURI)].forEach [ change |
      context.addModification(change) [ resource |
        val rootElement = resource.contents.head
        if (rootElement instanceof PackageDeclaration) {
          val newPackage = change.toURI.trimSegments(1).segmentsList.drop(2).join('.')
          rootElement.name = newPackage
        }
      ]
    ]
  }
}&lt;/pre&gt;&lt;p&gt;
Even though the hook’s implementation is language-specific, it receives the URIs of all changed files, independently of which language they belong to. This enables you to implement piggyback renaming, e.g. rename a diagram file when its model file has been renamed. Therefore, the first thing this example does is filter out all URIs of other languages via &lt;code&gt;canHandle&lt;/code&gt;. Then it creates a modifcation lambda in which the AST is accessible and it simply updates the EAttibute &lt;code&gt;name&lt;/code&gt; with the new package name. The ChangeSerializer will automatically detect which other files are referencing this files and update those accorrdingly. &lt;/p&gt;
&lt;h2&gt;Multi-Quickfixes&lt;/h2&gt;
&lt;p&gt;We also made available a new QuickFix API based on the ChangeSerializer. It has interesing capabilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-QuickFixes are now supported by Xtext: As a user you can select multiple markers from the Eclipse Problems View and fix them all at once with a single action. It’s hard to over-state how awesome this is!&lt;/li&gt;
&lt;li&gt;Cross-File QuickFixes: A single QuickFix can now update several files at once.&lt;/li&gt;
&lt;li&gt;File rename/move simply by changing the URI in the EMF resource.&lt;/li&gt;
&lt;li&gt;Automatic updating of affected cross references: Changing a model element’s name can now be a rename refactoring!
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;@Fix(MyValidator.ISSUE_CODE_1)
public void fix1(final Issue issue, IssueResolutionAcceptor acceptor) {
  acceptor.acceptMulti(issue, &quot;Add Doc1&quot;, &quot;Adds Documentation&quot;, null, 
    (MyElement myEObject) -&amp;gt; {
      myEObject.setDoc(&quot;Better documentation&quot;);
    }
  );
}

@Fix(MyValidator.ISSUE_CODE_2)
public void fix2(final Issue issue, IssueResolutionAcceptor acceptor) {
  acceptor.acceptMulti(issue, &quot;Add Doc2&quot;, &quot;Adds Documentation&quot;, null, 
    (MyElement myEObject, ICompositeModificationContext&amp;lt;MyElement&amp;gt; context) -&amp;gt; {
      ctx.addModification(main, (obj) -&amp;gt; {
        obj.setDoc(&quot;Better documentation&quot;);
      }
    );
  });
}&lt;/pre&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;
The API works just like the old one, except that that now you’ll need to call &lt;code&gt;acceptor.acceptMulti()&lt;/code&gt; instead of &lt;code&gt;acceptor.accept()&lt;/code&gt;. There are two flavors of the API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The one with one parameter: &lt;code&gt;myEObject&lt;/code&gt;: In the lambda, you may modify any EObject from the same resource. Cross references and related files will be updated.
&lt;/li&gt;
&lt;li&gt;The one with two parameter: &lt;code&gt;myEObject&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;. The context object gives you fine-grained control over the ChangeSerializer which is operating behind the scenes. AST-modifications are only allowed via &lt;code&gt;ctx.addModification()&lt;/code&gt;. Since you tell &lt;code&gt;ctx.addModification&lt;/code&gt; about the root element about the modification, elements from other resources can be modified and/or you can keep the recorded model-subtree as small as possible. Also, via the &lt;code&gt;context&lt;/code&gt; object, you can enable/disable updating of cross references and related files.
&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;
The second QuickFix enables a pattern that’s important for Multi-Fixes: First resolve everything, then modify. For example when you’re storing EObject URIs in an issue’s user data, you’ll need to resolve them &lt;i&gt;before&lt;/i&gt; the first modification is applied. Otherwise, URIs may become unresolvable because the model has changed. These two stages are automatically handled properly when you do the resolution outside of &lt;code&gt;ctx.addModification()&lt;/code&gt; and the actual modification inside &lt;code&gt;ctx.addModification&lt;/code&gt;‘s lambda.
&lt;/p&gt;
&lt;h2&gt;Rename Element Refactoring&lt;/h2&gt;
&lt;p&gt;
Rename refacoring for model elements has long been avilable in Eclipse Xtext. New in Xtext 2.13.0 is a flag to enable the ChangeSerializer to be the driving engine: &lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;Workflow {
  component = XtextGenerator {
    ...
    language = StandardLanguage {
      ...
      renameRefactoring = {
        useChangeSerializer = true
      ...&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;And more!&lt;/h2&gt;
&lt;p&gt;Among the other changes there is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tons of bug-fixes, discussion, reviews. Thank you to all committers and Christian in particular.
&lt;/li&gt;&lt;li&gt;The project creation wizard can now create projects that contain build scripts that assemble regular or fat JARs for Language Servers. Thx Karsten!&lt;/li&gt;
&lt;li&gt;Improvements for indentation-based languages. Thank you Sebasitan!
&lt;/li&gt;&lt;li&gt;new collection literals for empty collection and Iterables.flatMap() for xbase.lib (Thx Karsten!)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 20 Oct 2017 15:58:13 +0000</pubDate>
</item>
<item>
	<title>InfoQ Eclipse feed: The Future of Java EE, A Q&amp;A with David Blevins: The Eclipse Foundation, EE4J and MicroProfile</title>
	<guid isPermaLink="true">http://www.infoq.com/news/2017/10/blevins-javaee-ee4j?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>http://www.infoq.com/news/2017/10/blevins-javaee-ee4j?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;http://www.infoq.com/styles/i/logo_bigger.jpg&quot; /&gt;&lt;p&gt;This year’s JavaOne saw many interesting announcements, and within the enterprise domain the most important news was that the Eclipse Foundation will become the new custodians of Java EE. InfoQ recently sat down with David Blevins, a long standing member of the Java EE community, and discussed what this move will mean,  and how developers can get involved with “EE4J”, the future of Java EE.&lt;/p&gt; &lt;i&gt;By Daniel Bryant&lt;/i&gt;</description>
	<pubDate>Fri, 20 Oct 2017 12:00:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Vert.x 3.5.0 released !</title>
	<guid isPermaLink="true">http://vertx.io/blog/vert-x-3-5-0-released</guid>
	<link>http://vertx.io/blog/vert-x-3-5-0-released</link>
	<description>&lt;article&gt;&lt;p&gt;The Vert.x team is pleased to announce the release of Vert.x 3.5.0.&lt;/p&gt;
&lt;p&gt;As usual it delivers an impressive number of high quality features.&lt;/p&gt;
&lt;h4 id=&quot;let-s-go-rxjava2&quot;&gt;Let’s go RxJava2&lt;/h4&gt;
&lt;p&gt;First and foremost this release delivers the RxJava2 API with support of its full range of types.&lt;/p&gt;
&lt;p&gt;In addition of &lt;code&gt;Single&lt;/code&gt;, Rxified APIs also expose the&lt;code&gt;Completable&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt; types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&amp;gt;&amp;gt;
&lt;span class=&quot;hljs-type&quot;&gt;Completable&lt;/span&gt; completable = server.rxClose();

completable.subscribe(() -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;closed&quot;&lt;/span&gt;));

// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; where the &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; can be null
&lt;span class=&quot;hljs-type&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt; ipAddress = dnsClient.rxLookup(&lt;span class=&quot;hljs-string&quot;&gt;&quot;www.google.com&quot;&lt;/span&gt;);
ipAddress.subscribe(
  value -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resolved to &quot;&lt;/span&gt; + value),
  err -&amp;gt; err.printStackTrace(),
  () -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;does not resolve&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava augments Vert.x streams with a &lt;code&gt;toObservable()&lt;/code&gt; method, likewise RxJava2 adds the &lt;code&gt;toFlowable()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;// Flowable&lt;/span&gt; maps to a &lt;span class=&quot;hljs-constant&quot;&gt;ReadStream&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&amp;gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Flowable&lt;/span&gt; flowable = asyncFile.toFlowable();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; but we still can get an &lt;span class=&quot;hljs-constant&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&amp;gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; non back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Observable&lt;/span&gt; flowable = asyncFile.toObservable();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s so different between &lt;code&gt;Flowable&lt;/code&gt; and &lt;code&gt;Observable&lt;/code&gt;? the former handles back-pressure, i.e the
subscriber can control the flow of items and the later can not!!!&lt;/p&gt;
&lt;p&gt;You can read the documentation in the section of the &lt;a href=&quot;http://vertx.io/docs/master/vertx-rx/java2/&quot;&gt;docs&lt;/a&gt;
or go straight to the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/rxjava2-examples&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;kotlin-coroutines&quot;&gt;Kotlin coroutines&lt;/h4&gt;
&lt;p&gt;Support for &lt;a href=&quot;http://vertx.io/docs/vertx-lang-kotlin-coroutines/kotlin/&quot;&gt;Kotlin Coroutines&lt;/a&gt; is one of my favourite 3.5 features (by the way I’ll present a talk about Vert.x
and coroutines at &lt;a href=&quot;https://www.kotlinconf.com/sessions/&quot;&gt;KotlinConf&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Coroutines allows you to reason about asynchronous flow the same way you do with traditional sequential flow with
the extra bonus to use &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; super combo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;val movie = ctx.pathParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;)
val rating = &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;.parseInt(ctx.queryParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;getRating&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])
val connection = awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt;&amp;gt; { client.getConnection(it) }
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
  val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt;&amp;gt; { connection.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(movie) }, it) }
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.rows.size == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {
    awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;UpdateResult&lt;/span&gt;&amp;gt; { connection.updateWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO RATING (VALUE, MOVIE_ID) VALUES ?, ?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(rating, movie) }, it) }
    ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;()
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;()
  }
} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {
  connection.close()
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is borrowed from our &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/kotlin-examples/coroutines&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: I’ve used &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; purposely instead of Kotlin’s &lt;code&gt;use&lt;/code&gt; extension method&lt;/p&gt;
&lt;h4 id=&quot;mqtt-client&quot;&gt;MQTT Client&lt;/h4&gt;
&lt;p&gt;In Vert.x 3.4 we added the &lt;a href=&quot;http://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_server&quot;&gt;MQTT server&lt;/a&gt;, 3.5 completes the
MQTT story with the &lt;a href=&quot;http://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_client&quot;&gt;MQTT client&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;MqttClient mqttClient = MqttClient.create(vertx,
   &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttClientOptions()
     .setPort(BROKER_PORT)
     .setHost(BROKER_HOST)).connect(ar -&amp;gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connected to a server&quot;&lt;/span&gt;);

    mqttClient.publish(
      MQTT_TOPIC,
      Buffer.buffer(MQTT_MESSAGE),
      MqttQoS.AT_MOST_ONCE,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      s -&amp;gt; mqttClient.disconnect(d -&amp;gt; System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Disconnected from server&quot;&lt;/span&gt;)));
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed to connect to a server&quot;&lt;/span&gt;);
    ar.cause().printStackTrace();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find MQTT client and server examples &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/mqtt-examples&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;web-api-contracts&quot;&gt;Web API contracts&lt;/h4&gt;
&lt;p&gt;With the new &lt;a href=&quot;http://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;OpenAPI&lt;/a&gt; router factory we can focus on the API implementation and not on the validation
of the input. The usage is quite simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;OpenAPI3RouterFactory&lt;/span&gt;.createRouterFactoryFromFile(vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;petstore.yaml&quot;&lt;/span&gt;, ar -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    // &lt;span class=&quot;hljs-type&quot;&gt;Spec&lt;/span&gt; loaded &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; success
    &lt;span class=&quot;hljs-type&quot;&gt;OpenAPI3RouterFactory&lt;/span&gt; routerFactory = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();

    // add your &lt;span class=&quot;hljs-type&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; security handlers to the factory

    // add it to a server
    vertx.createHttpServer()
      .requestHandler(routerFactory.getRouter()::accept)
      .listen();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    // &lt;span class=&quot;hljs-type&quot;&gt;Something&lt;/span&gt; went wrong during router factory initialization
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now as a developer you only need to care about the API and not on the validation. The OpenAPI router will ensure that a
request to an API will first to the contract before your handler is invoked.&lt;/p&gt;
&lt;h4 id=&quot;java-9-support&quot;&gt;Java 9 support&lt;/h4&gt;
&lt;p&gt;Java 9 was released a few days ago and the Vert.x stack has been carefully tested on Java 9 and most of our components
run on Java 9 (Groovy does not run well on Java 9, please see the support &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/Java-9-Support&quot;&gt;matrix&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As a bonus you can now use HTTP/2 out of the box with JDK SSL!&lt;/p&gt;
&lt;p&gt;You can also use Vert.x jars as anonymous modules.&lt;/p&gt;
&lt;h4 id=&quot;event-driven-json-parsing&quot;&gt;Event driven JSON Parsing&lt;/h4&gt;
&lt;p&gt;We provide now an event driven &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/core/parsetools/JsonParser.html&quot;&gt;JSON Parser&lt;/a&gt; emitting parse events that is very handy when you need to handle very large
JSON structures and you don’t want to buffer it which introduce extra latency and increase the memory consumption.&lt;/p&gt;
&lt;p&gt;The parser allows you to switch between fine grained JSON parse events or full structures, for instance
you can parse an array of object very efficiently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;JsonParser parser = JsonParser.newParser();

&lt;span class=&quot;hljs-comment&quot;&gt;// The parser will handle JSON objects as values&lt;/span&gt;
parser.objectValueMode();

parser.handler(event -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (event.type()) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;START_ARRAY:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// Start the array&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;END_ARRAY:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// End the array&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;VALUE:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// Handle each object&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;single-sql-operations&quot;&gt;Single SQL operations&lt;/h4&gt;
&lt;p&gt;Single SQL operations (aka &lt;em&gt;one-shot&lt;/em&gt;) have been drastically simplified: most of the &lt;code&gt;SQLOperations&lt;/code&gt; operations can now be 
performed directly on the &lt;code&gt;SQLClient&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT AVG(VALUE) AS VALUE FROM RATING WHERE MOVIE_ID=?&quot;&lt;/span&gt;, new &lt;span class=&quot;hljs-type&quot;&gt;JsonArray&lt;/span&gt;().add(id), ar2 -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;().get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;VALUE&quot;&lt;/span&gt;);
    // &lt;span class=&quot;hljs-type&quot;&gt;Continue&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under the hood, the client takes care of the pool acquire/release interaction for you.&lt;/p&gt;
&lt;h4 id=&quot;native-transport-and-domain-sockets&quot;&gt;Native transport and domain sockets&lt;/h4&gt;
&lt;p&gt;We now support &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_native_transports&quot;&gt;native transports&lt;/a&gt; on Linux (Epoll) and MacOS (KQueue), as well as &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_domain_sockets&quot;&gt;UNIX domain sockets&lt;/a&gt; for
&lt;code&gt;NetServer/NetClient&lt;/code&gt; (&lt;code&gt;HttpServer&lt;/code&gt;/&lt;code&gt;HttpClient&lt;/code&gt; should support UNIX domain sockets soon).&lt;/p&gt;
&lt;h4 id=&quot;auth-handler-chaining&quot;&gt;Auth handler chaining&lt;/h4&gt;
&lt;p&gt;There are times when you want to support multiple authN/authZ mechanisms in a single application.&lt;/p&gt;
&lt;p&gt;Vert.x Web supports auth handlers &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_chaining_multiple_auth_handlers&quot;&gt;chaining&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;vert-x-config-improvements&quot;&gt;Vert.x config improvements&lt;/h4&gt;
&lt;p&gt;Vert.x Config allows configuring your application by assembling config chunks from different locations such as file,
http, zookeeper…&lt;/p&gt;
&lt;p&gt;In this version, we have added the support for Consul and Vault.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&quot;http://vertx.io/docs/vertx-config/java/#_consul_configuration_store&quot;&gt;Consul config store&lt;/a&gt;, you can retrieve your configuration from a Consul server - so in other words, distribute
the configuration from your orchestration infrastructure.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://vertx.io/docs/vertx-config/java/#_vault_config_store&quot;&gt;Vault config store&lt;/a&gt; lets you retrieve secrets avoiding hard coding secrets or distributing credentials using an
insecure way. Vault enforces the security of your secrets and only allowed applications can retrieve them. In other
words, now you can keep your secrets secret.&lt;/p&gt;
&lt;h4 id=&quot;acks&quot;&gt;ACKs&lt;/h4&gt;
&lt;p&gt;I want on behalf of the team to thank all the contributors for this release including the Google Summer of Code students
(&lt;a href=&quot;https://twitter.com/titantins&quot;&gt;Pavel Drankov&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/slinkyguardiani&quot;&gt;Francesco Guardiani&lt;/a&gt; and &lt;a href=&quot;https://yunyul.in&quot;&gt;Yunyu Lin&lt;/a&gt;)
that delivered an impressive work.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.0-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.0-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available
from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.5.0 released !</title>
	<guid isPermaLink="true">http://vertx.io/blog/eclipse-vert-x-3-5-0-released</guid>
	<link>http://vertx.io/blog/eclipse-vert-x-3-5-0-released</link>
	<description>&lt;article&gt;&lt;p&gt;The Vert.x team is pleased to announce the release of Eclipse Vert.x 3.5.0.&lt;/p&gt;
&lt;p&gt;As usual it delivers an impressive number of high quality features.&lt;/p&gt;
&lt;h4 id=&quot;let-s-go-rxjava2&quot;&gt;Let’s go RxJava2&lt;/h4&gt;
&lt;p&gt;First and foremost this release delivers the RxJava2 API with support of its full range of types.&lt;/p&gt;
&lt;p&gt;In addition of &lt;code&gt;Single&lt;/code&gt;, Rxified APIs also expose the&lt;code&gt;Completable&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt; types:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&amp;gt;&amp;gt;
&lt;span class=&quot;hljs-type&quot;&gt;Completable&lt;/span&gt; completable = server.rxClose();

completable.subscribe(() -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;closed&quot;&lt;/span&gt;));

// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; where the &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; can be null
&lt;span class=&quot;hljs-type&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt; ipAddress = dnsClient.rxLookup(&lt;span class=&quot;hljs-string&quot;&gt;&quot;www.google.com&quot;&lt;/span&gt;);
ipAddress.subscribe(
  value -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resolved to &quot;&lt;/span&gt; + value),
  err -&amp;gt; err.printStackTrace(),
  () -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;does not resolve&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava augments Vert.x streams with a &lt;code&gt;toObservable()&lt;/code&gt; method, likewise RxJava2 adds the &lt;code&gt;toFlowable()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;// Flowable&lt;/span&gt; maps to a &lt;span class=&quot;hljs-constant&quot;&gt;ReadStream&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&amp;gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Flowable&lt;/span&gt; flowable = asyncFile.toFlowable();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; but we still can get an &lt;span class=&quot;hljs-constant&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&amp;gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; non back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Observable&lt;/span&gt; flowable = asyncFile.toObservable();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s so different between &lt;code&gt;Flowable&lt;/code&gt; and &lt;code&gt;Observable&lt;/code&gt;? the former handles back-pressure, i.e the
subscriber can control the flow of items and the later can not!!!&lt;/p&gt;
&lt;p&gt;You can read the documentation in the section of the &lt;a href=&quot;http://vertx.io/docs/master/vertx-rx/java2/&quot;&gt;docs&lt;/a&gt;
or go straight to the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/rxjava2-examples&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;kotlin-coroutines&quot;&gt;Kotlin coroutines&lt;/h4&gt;
&lt;p&gt;Support for &lt;a href=&quot;http://vertx.io/docs/vertx-lang-kotlin-coroutines/kotlin/&quot;&gt;Kotlin Coroutines&lt;/a&gt; is one of my favourite 3.5 features (by the way I’ll present a talk about Vert.x
and coroutines at &lt;a href=&quot;https://www.kotlinconf.com/sessions/&quot;&gt;KotlinConf&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Coroutines allows you to reason about asynchronous flow the same way you do with traditional sequential flow with
the extra bonus to use &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; super combo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;val movie = ctx.pathParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;id&quot;&lt;/span&gt;)
val rating = &lt;span class=&quot;hljs-type&quot;&gt;Integer&lt;/span&gt;.parseInt(ctx.queryParam(&lt;span class=&quot;hljs-string&quot;&gt;&quot;getRating&quot;&lt;/span&gt;)[&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;])
val connection = awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;SQLConnection&lt;/span&gt;&amp;gt; { client.getConnection(it) }
&lt;span class=&quot;hljs-keyword&quot;&gt;try&lt;/span&gt; {
  val &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; = awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;ResultSet&lt;/span&gt;&amp;gt; { connection.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT TITLE FROM MOVIE WHERE ID=?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(movie) }, it) }
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;.rows.size == &lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;) {
    awaitResult&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;UpdateResult&lt;/span&gt;&amp;gt; { connection.updateWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO RATING (VALUE, MOVIE_ID) VALUES ?, ?&quot;&lt;/span&gt;, json { &lt;span class=&quot;hljs-type&quot;&gt;array&lt;/span&gt;(rating, movie) }, it) }
    ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;200&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;()
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    ctx.response().setStatusCode(&lt;span class=&quot;hljs-number&quot;&gt;404&lt;/span&gt;).&lt;span class=&quot;hljs-keyword&quot;&gt;end&lt;/span&gt;()
  }
} &lt;span class=&quot;hljs-keyword&quot;&gt;finally&lt;/span&gt; {
  connection.close()
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This example is borrowed from our &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/kotlin-examples/coroutines&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: I’ve used &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;finally&lt;/code&gt; purposely instead of Kotlin’s &lt;code&gt;use&lt;/code&gt; extension method&lt;/p&gt;
&lt;h4 id=&quot;mqtt-client&quot;&gt;MQTT Client&lt;/h4&gt;
&lt;p&gt;In Vert.x 3.4 we added the &lt;a href=&quot;http://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_server&quot;&gt;MQTT server&lt;/a&gt;, 3.5 completes the
MQTT story with the &lt;a href=&quot;http://vertx.io/docs/vertx-mqtt/java/#_vert_x_mqtt_client&quot;&gt;MQTT client&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;MqttClient mqttClient = MqttClient.create(vertx,
   &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttClientOptions()
     .setPort(BROKER_PORT)
     .setHost(BROKER_HOST)).connect(ar -&amp;gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connected to a server&quot;&lt;/span&gt;);

    mqttClient.publish(
      MQTT_TOPIC,
      Buffer.buffer(MQTT_MESSAGE),
      MqttQoS.AT_MOST_ONCE,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      s -&amp;gt; mqttClient.disconnect(d -&amp;gt; System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Disconnected from server&quot;&lt;/span&gt;)));
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed to connect to a server&quot;&lt;/span&gt;);
    ar.cause().printStackTrace();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find MQTT client and server examples &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/master/mqtt-examples&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;web-api-contracts&quot;&gt;Web API contracts&lt;/h4&gt;
&lt;p&gt;With the new &lt;a href=&quot;http://vertx.io/docs/vertx-web-api-contract/java/&quot;&gt;OpenAPI&lt;/a&gt; router factory we can focus on the API implementation and not on the validation
of the input. The usage is quite simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-type&quot;&gt;OpenAPI3RouterFactory&lt;/span&gt;.createRouterFactoryFromFile(vertx, &lt;span class=&quot;hljs-string&quot;&gt;&quot;petstore.yaml&quot;&lt;/span&gt;, ar -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    // &lt;span class=&quot;hljs-type&quot;&gt;Spec&lt;/span&gt; loaded &lt;span class=&quot;hljs-keyword&quot;&gt;with&lt;/span&gt; success
    &lt;span class=&quot;hljs-type&quot;&gt;OpenAPI3RouterFactory&lt;/span&gt; routerFactory = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;();

    // add your &lt;span class=&quot;hljs-type&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;and&lt;/span&gt; security handlers to the factory

    // add it to a server
    vertx.createHttpServer()
      .requestHandler(routerFactory.getRouter()::accept)
      .listen();
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    // &lt;span class=&quot;hljs-type&quot;&gt;Something&lt;/span&gt; went wrong during router factory initialization
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now as a developer you only need to care about the API and not on the validation. The OpenAPI router will ensure that a
request to an API will first to the contract before your handler is invoked.&lt;/p&gt;
&lt;h4 id=&quot;java-9-support&quot;&gt;Java 9 support&lt;/h4&gt;
&lt;p&gt;Java 9 was released a few days ago and the Vert.x stack has been carefully tested on Java 9 and most of our components
run on Java 9 (Groovy does not run well on Java 9, please see the support &lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/Java-9-Support&quot;&gt;matrix&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;As a bonus you can now use HTTP/2 out of the box with JDK SSL!&lt;/p&gt;
&lt;p&gt;You can also use Vert.x jars as anonymous modules.&lt;/p&gt;
&lt;h4 id=&quot;event-driven-json-parsing&quot;&gt;Event driven JSON Parsing&lt;/h4&gt;
&lt;p&gt;We provide now an event driven &lt;a href=&quot;http://vertx.io/docs/apidocs/io/vertx/core/parsetools/JsonParser.html&quot;&gt;JSON Parser&lt;/a&gt; emitting parse events that is very handy when you need to handle very large
JSON structures and you don’t want to buffer it which introduce extra latency and increase the memory consumption.&lt;/p&gt;
&lt;p&gt;The parser allows you to switch between fine grained JSON parse events or full structures, for instance
you can parse an array of object very efficiently:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;JsonParser parser = JsonParser.newParser();

&lt;span class=&quot;hljs-comment&quot;&gt;// The parser will handle JSON objects as values&lt;/span&gt;
parser.objectValueMode();

parser.handler(event -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;switch&lt;/span&gt; (event.type()) {
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;START_ARRAY:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// Start the array&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;END_ARRAY:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// End the array&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
    &lt;span class=&quot;hljs-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;VALUE:&lt;/span&gt;
      &lt;span class=&quot;hljs-comment&quot;&gt;// Handle each object&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;break&lt;/span&gt;;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;single-sql-operations&quot;&gt;Single SQL operations&lt;/h4&gt;
&lt;p&gt;Single SQL operations (aka &lt;em&gt;one-shot&lt;/em&gt;) have been drastically simplified: most of the &lt;code&gt;SQLOperations&lt;/code&gt; operations can now be 
performed directly on the &lt;code&gt;SQLClient&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;client.queryWithParams(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT AVG(VALUE) AS VALUE FROM RATING WHERE MOVIE_ID=?&quot;&lt;/span&gt;, new &lt;span class=&quot;hljs-type&quot;&gt;JsonArray&lt;/span&gt;().add(id), ar2 -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    &lt;span class=&quot;hljs-type&quot;&gt;int&lt;/span&gt; value = ar.&lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt;().get(&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;).getInteger(&lt;span class=&quot;hljs-string&quot;&gt;&quot;VALUE&quot;&lt;/span&gt;);
    // &lt;span class=&quot;hljs-type&quot;&gt;Continue&lt;/span&gt;
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Under the hood, the client takes care of the pool acquire/release interaction for you.&lt;/p&gt;
&lt;h4 id=&quot;native-transport-and-domain-sockets&quot;&gt;Native transport and domain sockets&lt;/h4&gt;
&lt;p&gt;We now support &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_native_transports&quot;&gt;native transports&lt;/a&gt; on Linux (Epoll) and MacOS (KQueue), as well as &lt;a href=&quot;http://vertx.io/docs/vertx-core/java/#_domain_sockets&quot;&gt;UNIX domain sockets&lt;/a&gt; for
&lt;code&gt;NetServer/NetClient&lt;/code&gt; (&lt;code&gt;HttpServer&lt;/code&gt;/&lt;code&gt;HttpClient&lt;/code&gt; should support UNIX domain sockets soon).&lt;/p&gt;
&lt;h4 id=&quot;auth-handler-chaining&quot;&gt;Auth handler chaining&lt;/h4&gt;
&lt;p&gt;There are times when you want to support multiple authN/authZ mechanisms in a single application.&lt;/p&gt;
&lt;p&gt;Vert.x Web supports auth handlers &lt;a href=&quot;http://vertx.io/docs/vertx-web/java/#_chaining_multiple_auth_handlers&quot;&gt;chaining&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;vert-x-config-improvements&quot;&gt;Vert.x config improvements&lt;/h4&gt;
&lt;p&gt;Vert.x Config allows configuring your application by assembling config chunks from different locations such as file,
http, zookeeper…&lt;/p&gt;
&lt;p&gt;In this version, we have added the support for Consul and Vault.&lt;/p&gt;
&lt;p&gt;With the &lt;a href=&quot;http://vertx.io/docs/vertx-config/java/#_consul_configuration_store&quot;&gt;Consul config store&lt;/a&gt;, you can retrieve your configuration from a Consul server - so in other words, distribute
the configuration from your orchestration infrastructure.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;http://vertx.io/docs/vertx-config/java/#_vault_config_store&quot;&gt;Vault config store&lt;/a&gt; lets you retrieve secrets avoiding hard coding secrets or distributing credentials using an
insecure way. Vault enforces the security of your secrets and only allowed applications can retrieve them. In other
words, now you can keep your secrets secret.&lt;/p&gt;
&lt;h4 id=&quot;acks&quot;&gt;ACKs&lt;/h4&gt;
&lt;p&gt;I want on behalf of the team to thank all the contributors for this release including the Google Summer of Code students
(&lt;a href=&quot;https://twitter.com/titantins&quot;&gt;Pavel Drankov&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/slinkyguardiani&quot;&gt;Francesco Guardiani&lt;/a&gt; and &lt;a href=&quot;https://yunyul.in&quot;&gt;Yunyu Lin&lt;/a&gt;)
that delivered an impressive work.&lt;/p&gt;
&lt;h4 id=&quot;finally&quot;&gt;Finally&lt;/h4&gt;
&lt;p&gt;The release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.0-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.0-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available
from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.0%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.0/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Industry 4.0 Open Testbed Addresses Performance Monitoring and Management in Manufacturing</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/sojFX7zfPpY/20171019_industry40_testbed.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/sojFX7zfPpY/20171019_industry40_testbed.php</link>
	<description>Bosch Software Innovations, CONTACT Software, Eurotech, fortiss GmbH, and InfluxData collaborate to demonstrate Product Performance Management.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/sojFX7zfPpY&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 19 Oct 2017 16:00:00 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: Industry 4.0 Meets Open Source</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4400</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/wmDReE-hu2I/</link>
	<description>&lt;p&gt;A key industry that is driving the Internet of Things is Manufacturing. Companies are always looking to make their manufacturing process more efficient, flexible and improve quality, while lowering costs. Therefore, modernizing factory floors and integrating factory equipment with the enterprise IT systems is of interest to many manufacturing companies. In Germany, they call this trend Industrie 4.0. They see IoT as being the fourth industrial revolution to fundamentally change the manufacturing industry. For history buffs, the other industrial revolutions are considered to be: mechanization with water and steam, mass production, and robotic automation.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;Eclipse IoT&lt;/a&gt; community has been developing open source technology that can be used to implement Industry 4.0 solutions. A key strength of our community is that we have companies like Bosch, Red Hat, Eurotech, Sierra Wireless, IBM and others,  who are experts in operational technology (OT) and experts in enterprise IT technology (IT). It is really the integration of OT and IT that leads to successful Industry 4.0 deployments.&lt;/p&gt;
&lt;p&gt;To help educate organizations on how open source software can be used to implement Industry 4.0 solutions, the Eclipse IoT Working Group has announced two new initiative:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A new white paper titled ‘&lt;a href=&quot;https://iot.eclipse.org/resources/white-papers/Eclipse%20IoT%20White%20Paper%20-%20Open%20Source%20Software%20for%20Industry%204.0.pdf&quot;&gt;Open Source for Industry 4.0&lt;/a&gt;‘ has been published. This white paper describes the software features required for Industry 4.0 and what open source projects are available.&lt;/li&gt;
&lt;li&gt;A new Eclipse Open IoT Testbed has been launched to showcase how Eclipse IoT technology and commercial solutions can be used to implement Production Performance Management (PPM) for factory floors. The &lt;a href=&quot;https://iot.eclipse.org/testbeds/production-performance-management/&quot;&gt;PPM Testbed&lt;/a&gt; is a collaboration of Bosch SI, Contact Software, InfluxData, Eurotech and fortis GmbH. It is a great example of how open source software can be used to solve important challenges in the manufacturing industry.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both these initiatives are great examples of collaborations made possible by the Eclipse IoT Working Group. It also shows how open source is really ready to solve Industry 4.0 challenges.&lt;/p&gt;
&lt;p&gt;Next week we will be talking a lot about the PPM testbed, Industry 4.0 and &lt;a href=&quot;https://www.eclipsecon.org/europe2017/iot&quot;&gt;All Things IoT&lt;/a&gt;.  I hope you will join us.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4400/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4400/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4400&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/wmDReE-hu2I&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 19 Oct 2017 15:03:48 +0000</pubDate>
</item>
<item>
	<title>typefox.io: Theia Update – Extensions, Git Support &amp; More</title>
	<guid isPermaLink="false">http://typefox.io/?p=14429</guid>
	<link>http://typefox.io/theia-update</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 0px;&quot;&gt;
			&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
				&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Back in May, we &lt;a href=&quot;https://typefox.io/theia-one-ide-for-desktop-cloud&quot;&gt;announced&lt;/a&gt; a new open-source IDE framework for build Desktop &amp;amp; Cloud IDEs implemented in TypeScript. Since then, Theia has become more mature and feature rich, approaching its &lt;a href=&quot;https://github.com/theia-ide/theia/milestone/3&quot;&gt;&lt;strong&gt;1.0 BETA version&lt;/strong&gt;&lt;/a&gt; on December 6. &lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;During the last couple of months, the Theia developers (we count 19 contributors so far with two companies backing up the development) have been busy laying out important groundwork as well as implementing features. In this post, I want to give you an overview of the current state.&lt;/span&gt;&lt;/p&gt;
&lt;h2 class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Extension System&lt;/b&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Besides being able to run both a desktop and a cloud IDE, from the same source code, an extendable platform has been one of the primary motivations for Theia. We had mainly two requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Extensions should be first class citizens&lt;br /&gt;
&lt;/strong&gt;An extension should be able to contribute and change any aspect of a Theia-based application. The goal really is to allow developers to compose custom products from extensions. Therefore, in Theia, everything is an extension. So even in the core, we eat our own dog food. This is different to e.g. VS Code which runs extensions in an isolated sandbox with only a limited API exposed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Discover and Install Extensions&lt;br /&gt;
&lt;/strong&gt;&lt;/strong&gt;The other requirement was to allow users to change the set of installed extensions at runtime, by searching a registry/marketplace and installing/updating/removing extensions. This is very common, but e.g. Eclipse Che does not support such a feature yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;The extension system has been one of the most important tasks, as it lays out how future development can scale and an eco-system can grow. Therefore another important goal was to make it as simple as possible and rely on existing knowledge and widely used concepts.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Theia extensions are regular &lt;em&gt;Node.js&lt;/em&gt; packages which you publish to &lt;a href=&quot;http://npmjs.org&quot;&gt;npmjs.or&lt;/a&gt; or another npm registry. To turn your package into a Theia extension, you only need to add minimal information to the &lt;code&gt;package.json&lt;/code&gt;. At the core, we use dependency injection (&lt;a href=&quot;https://github.com/inversify/InversifyJS&quot;&gt;InversifyJS&lt;/a&gt;) to wire the contributions from all extensions together. Theia comes with a CLI tool that makes it easy to create an application from a list of extensions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The dynamic part that allows to install and uninstall extensions at runtime, really just changes the list of extensions and runs the CLI again. When an extension has been successfully installed it informs the user that the application has been updated and restarted. After a quick reload the new extensions is ready to be used.&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Furthermore, for extension developers we’ve created a small &lt;a href=&quot;http://yeoman.io/&quot;&gt;Yeoman&lt;/a&gt; generator that gets you started with the initial project setup. You can find more &lt;a href=&quot;https://github.com/theia-ide/theia/blob/master/doc/Authoring_Extensions.md#authoring-theia-extensions&quot;&gt;detailed documentation here&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;div class=&quot;fusion-video fusion-youtube&quot;&gt;&lt;div class=&quot;video-shortcode&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;&lt;/h2&gt;
&lt;h2 class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Git Support&lt;/b&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Another new extension is the Git extension, that supports the user to author commits and execute basic git commands. It is very similar to the git support in VS Code, so you can &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;see the list of local and staged changes, &lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;open diff editors to see more details and &lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;execute standard git operations. &lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&quot;s1&quot;&gt;Under the hood, the extension uses GitHub’s &lt;a href=&quot;https://github.com/desktop/dugite&quot;&gt;dugite&lt;/a&gt; library, which we &lt;a href=&quot;https://github.com/TypeFox/dugite-extra&quot;&gt;extended&lt;/a&gt; a bit.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Here’s ashort screencast showing it in action:&lt;/p&gt;
&lt;div class=&quot;fusion-video fusion-youtube&quot;&gt;&lt;div class=&quot;video-shortcode&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;&lt;/h2&gt;
&lt;h2 class=&quot;p4&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&lt;b&gt;Language Tooling&lt;/b&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Intelligent support for languages is one of the main features an IDE absolutely needs to have. With Theia, we decided to primarily support the Language Server Protocol. By integrating the awesome Monaco editor, that also drives VS Code we already have an excellent foundation. Today, &lt;b&gt;Theia has full support for the LSP&lt;/b&gt; and we even have additional extensions for some languages. For instance, in Java one can navigate to files contained in jars.&lt;/span&gt;&lt;/p&gt;
&lt;p class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;All &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/wiki/Protocol-Implementations&quot;&gt;&lt;strong&gt;46&lt;/strong&gt; available language servers&lt;/a&gt; will work fine in Theia, we just haven’t wrapped all of them in a Theia extension for easy consumption, yet. As of today, the following languages are supported:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li class=&quot;p3&quot;&gt;&lt;span class=&quot;s1&quot;&gt;Java&lt;/span&gt;&lt;/li&gt;
&lt;li class=&quot;p3&quot;&gt;JavaScript / TypeScript&lt;/li&gt;
&lt;li class=&quot;p3&quot;&gt;Python&lt;/li&gt;
&lt;li class=&quot;p3&quot;&gt;C/C++ (Clangd in development)&lt;/li&gt;
&lt;li class=&quot;p3&quot;&gt;Go&lt;/li&gt;
&lt;li class=&quot;p3&quot;&gt;YANG&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list of features Theia supports includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content assist&lt;/li&gt;
&lt;li&gt;find references&lt;/li&gt;
&lt;li&gt;go to definition&lt;/li&gt;
&lt;li&gt;diagnostics (incl. a problems-view listing all of them)&lt;/li&gt;
&lt;li&gt;outline&lt;/li&gt;
&lt;li&gt;quick outline&lt;/li&gt;
&lt;li&gt;hover&lt;/li&gt;
&lt;li&gt;signature help&lt;/li&gt;
&lt;li&gt;formatting&lt;/li&gt;
&lt;li&gt;rename refactoring&lt;/li&gt;
&lt;li&gt;syntax coloring&lt;/li&gt;
&lt;li&gt;folding&lt;/li&gt;
&lt;li&gt;bracket matching&lt;/li&gt;
&lt;li&gt;toggle comment&lt;/li&gt;
&lt;li&gt;code lenses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many more important editing features, provided by Monaco, such as moving lines, multi cursor support and so on. Also, Theia has gained lots of other smaller nice goodies, like the quick command palette, preference support or the open file command.&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_14451&quot; style=&quot;width: 730px;&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;size-full wp-image-14451&quot; height=&quot;390&quot; src=&quot;http://typefox.io/wp-content/uploads/2017/10/quick-open.gif&quot; width=&quot;720&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Quick Open in Theia&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, the colleagues from Ericsson are actively working on managing processes, debugging support and other useful extensions.&lt;/p&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Theia has advanced to a solid foundation for future browser and desktop IDEs. If you were looking for an easy-to-use, open-source framework to build extendable IDEs, you can consider Theia now.&lt;/p&gt;
&lt;p&gt;Have a look at the &lt;a href=&quot;https://github.com/theia-ide/theia/milestone/3&quot;&gt;backlog&lt;/a&gt; to get an idea of what we want to accomplish in the next weeks.&lt;/p&gt;
&lt;p&gt;Besides using Theia for your own projects/products we are welcoming any kind of contribution. If you want to get involved with Theia, please ping us on &lt;a href=&quot;https://github.com/theia-ide/theia&quot;&gt;GitHub&lt;/a&gt; or &lt;a href=&quot;https://gitter.im/theia-ide/theia&quot;&gt;Gitter&lt;/a&gt; (or StackOverflow, Twitter, etc.). There are many fun things to work on and some are explicitly &lt;a href=&quot;https://github.com/theia-ide/theia/labels/beginners&quot;&gt;marked for starting contributors&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let us know what you think!&lt;/p&gt;
&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;
			&lt;/div&gt;
		&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 19 Oct 2017 11:30:01 +0000</pubDate>
</item>
<item>
	<title>Karsten Thoms: Next stop: EclipseCon Europe 2017</title>
	<guid isPermaLink="false">http://kthoms.wordpress.com/?p=819</guid>
	<link>https://kthoms.wordpress.com/2017/10/18/next-stop-eclipsecon-europe-2017/</link>
	<description>&lt;p&gt;As every year &lt;a href=&quot;https://www.eclipsecon.org/europe2017/&quot;&gt;EclipseCon Europe&lt;/a&gt; is fixed in my schedule, and I am excited to go there. It is a melting pot for the Eclipse Community, a big family come together. I am in the last preparations before departure to Ludwigsburg, and can’t wait to finally go there.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;FullSizeRender.jpg&quot; class=&quot;alignnone size-full wp-image-858&quot; src=&quot;https://kthoms.files.wordpress.com/2017/10/fullsizerender.jpg?w=584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;itemis is of course sponsoring EclipseCon Europe, and we will have a booth in front of the theater. With &lt;strong&gt;12 talks, 8 speakers and about 20 attendees&lt;/strong&gt; I am expecting that the it(emis)-Crowd is again the biggest party at EclipseCon Europe. The itemis booth will be the place where you will have the highest chance to meet me, but of course there is plenty of time to meet each other.&lt;/p&gt;
&lt;h2&gt;Meeting the Scout and Modeling community&lt;/h2&gt;
&lt;p&gt;As in the past years, I will start my journey already on sunday. I will again join the &lt;a href=&quot;https://www.eclipse.org/scout/&quot;&gt;Eclipse Scout&lt;/a&gt; community’s pre-conference dinner at the Rossknecht. The past years I was joining on monday the Scout User Group meeting, but this year I committed to join the &lt;a href=&quot;https://www.eclipsecon.org/europe2017/schedule_item/guided-tour-eclipse-modeling&quot;&gt;Guided Tour on Eclipse Modeling&lt;/a&gt; at the Unconference. At 14:40 I will give there my first talk, an insight on the &lt;strong&gt;Xtend&lt;/strong&gt; language.&lt;/p&gt;
&lt;h2&gt;Xtext and Platform development&lt;/h2&gt;
&lt;p&gt;This Friday, Oct 20th, &lt;strong&gt;Xtext 2.13 will be released&lt;/strong&gt; finally and I have invested quite some time in the past months to find and resolve bugs. I have worked intensively with the &lt;a href=&quot;https://www.codetrails.com/error-analytics/&quot;&gt;Eclipse EARI&lt;/a&gt; system, and investigated together with Christian Dietrich the problem reports we are getting in. Until we now managed to get less problem reports in than we are processing. Christian and I are those who care most about user problems and we have fixed together the majority of bugs for this and the past releases. Christian does an incredible job! We will happily share insights on the current state on Xtext at the Unconference and all conference days.&lt;/p&gt;
&lt;p&gt;The past months I starting getting involved into the Eclipse Platform itself. While before I completely focussed on Xtext development and just used the platform, I thought it was time to give something back. I am using Eclipse every day and still love to work with it. I am recognizing that others prefer other IDEs, or even new ones are built, and there are reasons for that. But still for complex development tasks I believe that an extensible desktop IDE like Eclipse is the best tool. Eclipse has some flaws, and I could help there. Now I am frequently contributing to the Eclipse Platform (with focus on performance, usability and stability) and found into the development process, which took me some time. Because of this engagement I am expecting to have some interersting talks on platform development with some driving persons like Lars Vogel, Dani Megert, Alexander Kurtakov, Mickael Istria, Mikaël Barbero or Andrey Loskutov. I have to thank them for guiding me in the process and reviewing my changes carefully. Guys, I owe you a beer at the Nestor bar!&lt;/p&gt;
&lt;h2&gt;A conference day (almost) never ends&lt;/h2&gt;
&lt;p&gt;Nestor bar, the place to be after the long conference day! You will find me there each evening from monday on till late. Like every year it will be hard to celebrate long and get up early. But be sure, I’ll manage that. It isn’t the first time, and won’t be the last. The party ain’t over until it’s over.&lt;/p&gt;
&lt;p&gt;I’m not staying at Nestor; like last year I reserved early a room at the nearby Villa Forêt. It is just a 5 minute walk (and some walking does not harm) and fine for me. It was in this hotel where I met Philip Wenig some years ago at breakfast. Ever since then I had nice talks with him and I always enjoy that. This year I already met him twice: At the Eclipse DemoCamp in Zurich, and at Eclipse Hackathon Hamburg.&lt;/p&gt;
&lt;h2&gt;Talks at the main conference&lt;/h2&gt;
&lt;p&gt;This year, besides my Xtend talk at the Unconference, I will give 2 talks at EclipseCon:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;screenshot 21.png&quot; class=&quot;alignnone size-full wp-image-855&quot; src=&quot;https://kthoms.files.wordpress.com/2017/10/screenshot-21.png?w=584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/session/introduction-expression-languages-xtext&quot;&gt;&lt;strong&gt;“Introduction to Expression Languages with Xtext”&lt;/strong&gt;&lt;/a&gt; (Tuesday 14:30, Silchersaal) will give you some patterns in Xtext grammers when you need to embed expressions in your language. Xtext ships with Xbase, which is a full expression langauge that you can easily integrate, but sometimes Xbase is not the right choice for you. Xbase is tightly bound to the Java typesystem and JDT, and for your language this could be undesired. Then you have to build your own expression language, which is a bit advanced. But you can learn a lot from Xbase, and in this talk I will show some grammar patterns that you could take from Xbase. I already gave this talk at EclipseCon France this year, so most of the slides are fortunately prepared.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;screenshot 20.png&quot; class=&quot;alignnone size-full wp-image-856&quot; src=&quot;https://kthoms.files.wordpress.com/2017/10/screenshot-20.png?w=584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Different for my second talk: &lt;strong&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/session/advanced-oomph-setup-authoring&quot;&gt;“Advanced Oomph Setup Authoring”&lt;/a&gt;&lt;/strong&gt; (Wednesday 12:00, Silchersaal). This is completely new, and I am right now working on the slide deck. I was responsible for developing Xtext’s &lt;a href=&quot;https://projects.eclipse.org/projects/tools.oomph&quot;&gt;Oomph&lt;/a&gt; setup, which is compared to other setups at Eclipse more complex. But I have learned much from the other setups. Again, there are some patterns that can be recognized among the different setups. I will show and explain screenshots from different setups and discuss some advantages or disadvantages from then. Oomph is a mighty framework, and creating good setups is a time consuming and error prone work. The information given in this talk should give some help to author more robust setups, and build them faster. Advanced Oomph users might recognize that they do already much right, but even they might get the one or other idea to enhance their setups. Users rather new with Oomph will get the most out of this talk. They should at least have a basic idea about Oomph project setups.&lt;/p&gt;
&lt;h2&gt;Lightning Talks at the itemis booth&lt;/h2&gt;
&lt;p&gt;This year we will give some 5-Minute Lightning Talks at our booth in pauses. We have a lot of interesting small talks this time, from Xtext to Java 9, and even where plastic plants play a role. Just come around to the exhibitor’s area in front of the theater and get some inspiration.&lt;/p&gt;
&lt;p&gt;Also here I have 2 slots:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuesday 15:50: &lt;strong&gt;“What’s new in Eclipse Photon?”&lt;/strong&gt;: Let me show you a sneak preview on some features coming in Photon. You will see some of my contributions and some other.
&lt;p&gt;&lt;img alt=&quot;What's New in Eclipse Photon.001.jpeg&quot; class=&quot;alignnone size-full wp-image-861&quot; src=&quot;https://kthoms.files.wordpress.com/2017/10/whats-new-in-eclipse-photon-001.jpeg?w=584&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Wednesday 15:20: &lt;strong&gt;“A committer’s view on Eclipse Automated Error Reporting”&lt;/strong&gt;: As said before, &lt;a href=&quot;https://www.codetrails.com/error-analytics/&quot;&gt;AERI&lt;/a&gt; helped me a lot to improve Xtext and Eclipse Platform. I’ll show you what committers see from problems reported to it and how it can help to find bugs. Also, a big Thank You to the guys from Codetrails for the support!
&lt;p&gt;&lt;img alt=&quot;ACommittersViewOnEARI.001.jpeg&quot; class=&quot;alignnone size-full wp-image-862&quot; src=&quot;https://kthoms.files.wordpress.com/2017/10/acommittersviewoneari-001.jpeg?w=584&quot; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/itemis/&quot;&gt;Follow @itemis&lt;/a&gt; on Twitter to get notice on further talks from us!&lt;/p&gt;
&lt;h2&gt;The most important thing at EclipseCon is…&lt;/h2&gt;
&lt;p&gt;the people! I love to meet all the people again, from which most of them I only see once a year. This year I have already attended &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt;/, &lt;a href=&quot;https://cfp.devoxx.us/2017/talk/YLN-6781/Tackling_Performance_Issues_with_YourKit&quot;&gt;DevoXX US&lt;/a&gt; and EclipseCon France, so some of you folks I have already met again. But EclipseCon Europe is by far larger and more intensive. To all the people I already know, from year to year they become more.&lt;/p&gt;
&lt;h2&gt;Eclipse on the roll&lt;/h2&gt;
&lt;p&gt;It is a pleasure to see which companies and projects joined the Eclipse Foundation recently. Since I have a background in Java Enterprise development from early beginnings (yes, I had to implement bean managed persistence with EJB 1.0 in the ancient days and it was NOT funny!), I was delighted to see EE4J at Eclipse. Then IBM’s J9, Deeplearning4J, and the story is not over yet. If this continues, the Eclipse Foundation has a bright future and I am glad that itemis is a driving part of the story.&lt;/p&gt;
&lt;p&gt;For this year’s EclipseCon Europe some of this hot new stuff might come a bit too late, but I expect more talks related to these exciting technologies next year. Yes, there are already some talks, but I think the focus will shift from now on.&lt;/p&gt;
&lt;h2&gt;And finally: Time to rest&lt;/h2&gt;
&lt;p&gt;After EclipseCon I’m taking a week off. I need this already, and will desperately need this after this exciting and exhausting week. Back to my beloved family, who is awaiting me after a long week.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kthoms.wordpress.com/819/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kthoms.wordpress.com/819/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kthoms.wordpress.com&amp;amp;blog=6829080&amp;amp;post=819&amp;amp;subd=kthoms&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 18 Oct 2017 15:38:19 +0000</pubDate>
</item>
<item>
	<title>itemis: About the Power of Open Source Development at Eclipse</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/about-the-power-of-open-source-development-at-eclipse</guid>
	<link>https://blogs.itemis.com/en/about-the-power-of-open-source-development-at-eclipse</link>
	<description>&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;As a project deeply integrated with Eclipse JDT, Xtext has sometimes also to use internal API. This is, for example, necessary to leverage best performance of accessing Java elements. We try to avoid this whenever possible sometimes even by duplicating the code, and we never faced a problem for several years in this regard.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This October Eclipse released &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.7.1a/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Oxygen.1a&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which added Java 9 and JUnit 5 support to the recently released Oxygen.1 release. Java 9 support was a major effort for the JDT team and the fast availability to Eclipse users right after &lt;/span&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/9-relnotes-3622618.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;release of Java 9&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; last month proves the vibrant nature of Eclipse projects and the enthusiasm developers put into their projects. And naturally this feature required some major changes to JDT’s internals.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;Small change in JDT – great impact for Xtext users&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One of these refactorings lead to a signature change in one of JDT’s internal methods that Xtext makes use of. This is a small change, but crucial for Xtext users. All current productive versions of Xtext including Xtext 2.12, which participates in the Eclipse Oxygen release train, are compiled against this method and Xtext plugins would fail when running on JDT when this method would not be available in the specific signature. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At itemis we care about quality of the Eclipse projects we are involved in. A very valuable source information for us is the &lt;/span&gt;&lt;a href=&quot;https://www.codetrails.com/error-analytics/&quot;&gt;&lt;span&gt;Eclipse Automatic Error Reporting System&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (AERI). We actively scan reports there, since these are real issues real users have out there. Without AERI, the hurdle to report problems was rather high: You need an Eclipse Bugzilla account, find the right category and describe manually your problem. Many issues were not reported then. Now it is just one click to automatically submit a report. And the more users report the same issue, the more prominent this is shown to us developers.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;On Monday before the final release candidate there was suddenly a report on a linking problem, which showed the following excerpt in its stack trace:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;java.lang.NoSuchMethodError: &lt;br /&gt;org.eclipse.jdt.internal.core.JavaProject.computePackageFragmentRoots&lt;br /&gt;(Lorg/eclipse/jdt/core/IClasspathEntry;Lorg/eclipse/jdt/internal/compiler/util/ObjectVector;Ljava/&lt;br /&gt;util/HashSet;Lorg/eclipse/jdt/core/IClasspathEntry;ZLjava/util/Map;)V&lt;br /&gt;&lt;br /&gt;at org.eclipse.xtext.common.types.access.jdt.JdtTypeProvider.collectSourcePackageFragmentRoots&lt;br /&gt;(JdtTypeProvider.java:539)&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;From time to time there are similar reports, which usually indicate faulty configurations like a version mixture of Xtext bundles. AERI reports contain some information on the available bundles and their versions in the execution environment, which help identifying the context of the problem. Now this one was strange: It showed the version 3.1.50 of bundle org.eclipse.jdt.core installed. This version was unknown to us – Eclipse Oxygen.1 was delivered with version 3.1.0.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As we detected this problem it was my itemis colleague Christian Dietrich who immediately got into contact with the JDT team to discuss this issue and raised &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=525462&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Bug#525462&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Stephan Herrmann from the JDT team, also an active Xtext user, and Dani Megert worked with us to address this issue. Finally, it was decided together that the missing method would be added again. The release of Oxygen.1a was already in progress, and developers were informed through the &lt;/span&gt;&lt;a href=&quot;https://dev.eclipse.org/mhonarc/lists/cross-project-issues-dev/msg14907.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;cross-project mailing list&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; about this important issue.&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Fortunately the Eclipse Platform team agreed to respin the whole Oxygen.1a simultaneous release. There were two other issues with the JDT and Maven tooling, and these problems are solved with the Oxygen.1a release before all users are affected.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We from the Xtext team will now carefully review and reduce internal API usage and work together with the JDT team to find proper replacements or evolve suitable public API where it is missing. Thanks to Christian the issue was immediately resolved in Xtext’s source, so that upcoming Xtext 2.13 already does not use this specific internal API anymore.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Since Xtext is used in many different release versions out there it will take time until the internal API is not used by users out there, although the code base might be clean soon already. Further we will discuss internally and cross-team at EclipseCon how we will detect such situations even earlier. In the past we had builds running against several Eclipse versions, but you can imagine that keeping this alive is eating plenty resources both of developers and build servers. To assure our high support requirements it might be necessary to build this up again.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;img alt=&quot;open-source-team-work.jpg&quot; height=&quot;344&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/open-source-team-work.jpg?t=1508515820696&amp;amp;width=724&amp;amp;height=344&amp;amp;name=open-source-team-work.jpg&quot; style=&quot;background-color: transparent; color: #4a4a4a; font-size: 16px; font-weight: 300;&quot; width=&quot;724&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Eclipse: Open source development at its best&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At the time when the problem was detected there were 15 reports of this problem in AERI. Sounds much, but actually this is really just a few. Just consider the case that Oxygen.1a went live without detecting this, all Xtext users would have been affected. It is people like Christian, Stephan and Dani to thank that a disaster was avoided. This again shows the great co-working at Eclipse across projects and across companies.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Speaking of Xtext 2.13, the Xtext team itself is in its final release phase and we’ll release on October 20th, just in time for &lt;a href=&quot;https://www.eclipsecon.org/europe2017/&quot;&gt;EclipseCon Europe in Ludwigsburg&lt;/a&gt;! If you are attending EclipseCon and have questions on the new release, the future of Xtext or just want to drink a beer with us, come to the itemis booth (booth 13) or later to the bar at Nestor hotel. We can be bribed with a beer to share valuable internal insights and tips for you :)&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After this EclipseCon and Xtext release we are not going to rest a moment and will continue to make Xtext even more rock solid and improve its usability, stability and performance. Note that our Xtext team at itemis offers &lt;/span&gt;&lt;a href=&quot;https://info.itemis.com/professional-xtext-support&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Professional Support Services for Xtext&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; support plans. For your project consider to get us on board, together we can make your project even more successful.&lt;/span&gt;&lt;/p&gt; 
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a class=&quot;cta_button&quot; href=&quot;https://info.itemis.com/cs/ci/?pg=6f3a83c3-6d86-4cab-b702-f9702d201e70&amp;amp;pid=761475&amp;amp;ecid=&amp;amp;hseid=&amp;amp;hsic=&quot;&gt;&lt;img alt=&quot;Get Professional Support&quot; class=&quot;hs-cta-img &quot; src=&quot;https://no-cache.hubspot.com/cta/default/761475/6f3a83c3-6d86-4cab-b702-f9702d201e70.png&quot; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fabout-the-power-of-open-source-development-at-eclipse&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 18 Oct 2017 14:40:00 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Science Advances Open Source Technology for Scientific Research</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/nu-at-0M51U/20171018_scienceopensource.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/nu-at-0M51U/20171018_scienceopensource.php</link>
	<description>The Eclipse Science Working Group, a working group of the Eclipse Foundation, today announced the new releases of five open source projects used by the scientific research community.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/nu-at-0M51U&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 18 Oct 2017 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter | Utility Belt: Projects and Tools</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/UCZn0gpPNNg/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/UCZn0gpPNNg/</link>
	<description>Learn more about JUnit 5, e4 on JavaFX, scripting with EASE, embedded tools and Eclipse CDT, the Ferret search tool, and software ethics.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/UCZn0gpPNNg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 18 Oct 2017 10:02:00 +0000</pubDate>
</item>
<item>
	<title>EclipseCon Europe 2017: Download the EclipseCon 2017 App</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/europe2017/news/3154 at https://www.eclipsecon.org/europe2017</guid>
	<link>https://www.eclipsecon.org/europe2017/news/download-eclipsecon-2017-app</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Create your EclipseCon schedule with the app from EclipseSource. The app provides you with the program organized by track or by date and time with the complete abstract and speaker information. You can locate your destination with the built in maps of the conference venue and its surroundings. Login to eclipsecon.org during the conference to submit feedback on the talks. Download from these links:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;a href=&quot;https://itunes.apple.com/us/app/eclipsecon-europe-2017/id1280396790?l=de&amp;amp;ls=1&amp;amp;mt=8&quot; target=&quot;_blank&quot;&gt;iOS: iTunes Preview&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;
		&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.eclipsesource.eclipsecon&quot; target=&quot;_blank&quot;&gt;Android: Google Play&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We asked the EclipseSource team to tell us more about the app:&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/news/download-eclipsecon-2017-app&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/europe2017/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/App%20screens.png?itok=8VOK1QUY&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 17 Oct 2017 14:22:18 +0000</pubDate>
</item>
<item>
	<title>itemis: Formatting for the Masses</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/formatting-for-the-masses</guid>
	<link>https://blogs.itemis.com/en/formatting-for-the-masses</link>
	<description>&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;Reading source code happens way more often than writing it. And reading code is a lot easier when it is well formatted. Linebreaks and indentations are guiding the reader and it is more obvious in which context things are happening. Doing formatting completely manually is simply not an option, especially for larger changes. For that reason general purpose languages, like Java, do have many different implementations for automatic code formatters or “pretty printers”. &lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;All implementations come with a default behaviour that works, but this is not enough. Formatting has always been a matter of taste and therefore users want to customize all the different settings to their liking. Therefore &lt;strong&gt;professional formatting tools like Eclipse JDT&lt;/strong&gt; offer a gazillion number of options.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;Formatting-code-Eclipse-JDT.png&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Software%20Development/Formatting-code-Eclipse-JDT.png?t=1508515820696&amp;amp;width=640&amp;amp;name=Formatting-code-Eclipse-JDT.png&quot; style=&quot;width: 640px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;640&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;These options can be stored as preferences and shared together with the code. Sounds cool, but it is still not enough for “everybody”. People want to adjust those settings or when, they come to the point where the tool does not offer the 'right' options, they will use tag-comments in JDT. This will make the formatter shut up for a specific area.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;formatting-code.png&quot; height=&quot;392&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Software%20Development/formatting-code.png?t=1508515820696&amp;amp;width=286&amp;amp;height=392&amp;amp;name=formatting-code.png&quot; width=&quot;286&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The formatter can be explicitly switched on and off to manually format the code. This is a workaround and not a solution. The problem is that “everybody” wants to format their code differently. Some language designers try to circumvent this problem by mandating the correct formatting on the syntax level as Python does it, but this is oftentimes limited to the indentation level and not to the overall formatting rules.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For most general purpose languages, there are a gazillion tools to format the code in different ways with different options and the user has the choice – the choice of the tool, the choice of options – everything can be tailored to specific needs. &lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Formatting code for DSLs with Xtext&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For &lt;strong&gt;domain specific languages (DSL)&lt;/strong&gt; there is nothing like that coming out of the box. Looking at frameworks like &lt;a href=&quot;https://www.itemis.com/en/xtext/&quot;&gt;Eclipse Xtext&lt;/a&gt;, it is really a breeze to create languages, but there is no formatter coming for free. Of course, &lt;strong&gt;the framework is offering a powerful API to define formatters&lt;/strong&gt;. Decisions can be made on grammar level for all instances of the DSL and in addition you have access to a specific part of the abstract syntax tree so can make decisions based on the structure and values of your model, too. Having the option to format code based on syntax and structure sounds really cool and actually it is, but it’s a lot of code that needs to be written and it’s not “that” easy.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Formatting.code.png&quot; height=&quot;261&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Software%20Development/Formatting.code.png?t=1508515820696&amp;amp;width=724&amp;amp;height=261&amp;amp;name=Formatting.code.png&quot; width=&quot;724&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After you are satisfied with your implementation and your formatter works as you wanted, your users might see that differently. As already said, &lt;strong&gt;formatting is a matter of taste&lt;/strong&gt; and they might come up with the need for options. An additional newline here, no space there... these options do add a lot of complexity to the formatter code. And that's certainly not for free. Time to define the canonical formatting for your DSL? Or can we do better? How about &lt;strong&gt;formatters that take examples and learn how to format similar documents?&lt;/strong&gt; Intelligent formatters that nobody needs to write manually and that are driven by your coding style? Can this be done?&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We started to ask ourselves the same questions and looked at existing libraries out there. As we &lt;strong&gt;use &lt;a href=&quot;http://www.antlr.org/&quot;&gt;AntLR&lt;/a&gt; in Xtext&lt;/strong&gt; heavily, we looked in that direction, too. And we found &lt;a href=&quot;https://github.com/antlr/codebuff&quot;&gt;a very promising project named Codebuff&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, that is driven by Terence Parr, the mastermind behind AntLR. It aims to do formatting by example and the only thing you need is a grammar and a bunch of examples.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;formatting-for-the-masses.jpg&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/formatting-for-the-masses.jpg?t=1508515820696&amp;amp;width=724&amp;amp;name=formatting-for-the-masses.jpg&quot; style=&quot;width: 724px;&quot; title=&quot;formatting-for-the-masses.jpg&quot; width=&quot;724&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;We have played around with it and it really looks promising. In our &lt;/span&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/session/formatting-masses&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;talk&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; at the &lt;/span&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2017/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EclipseCon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Europe at Wednesday, October 25, 2017, 02:45 pm to 03:20 pm Sebastian and I will give you an overview of what we have figured out, how it works and how it might integrate with Xtext. &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;See you there!&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fformatting-for-the-masses&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 17 Oct 2017 13:28:35 +0000</pubDate>
	<author>schill@itemis.com (Holger Schill)</author>
</item>
<item>
	<title>Andrey Loskutov: SpotBugs 3.1.0 RC7 with Java 9 support</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-342159971341432126.post-2324578057630268882</guid>
	<link>http://javaclipse.blogspot.com/2017/10/spotbugs-310-rc7-with-java-9-support.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;b&gt;FindBugs is dead, long live SpotBugs!&lt;/b&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://spotbugs.github.io/images/logos/spotbugs_logo_300px.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://spotbugs.github.io/images/logos/spotbugs_logo_300px.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;I would like to introduce here &lt;a href=&quot;https://spotbugs.github.io/&quot;&gt;SpotBugs&lt;/a&gt;, a spiritual successor of &lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;, crafted by the community.&lt;br /&gt;&lt;br /&gt;We've just released &lt;a href=&quot;https://github.com/spotbugs/spotbugs/blob/3.1.0_RC7/CHANGELOG.md&quot;&gt;3.1.0 RC7 version&lt;/a&gt; and hope to release the final 3.1.0 this weekend.&lt;br /&gt;One of the main drivers to release &lt;a href=&quot;https://spotbugs.github.io/&quot;&gt;SpotBugs&lt;/a&gt; now is to support Java 9, but there were also few other exciting changes in the previous &lt;a href=&quot;https://spotbugs.github.io/&quot;&gt;SpotBugs&lt;/a&gt; milestones, please check them for more details: &lt;a href=&quot;https://github.com/spotbugs/spotbugs/releases&quot;&gt;https://github.com/spotbugs/spotbugs/releases&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;We also have a new &lt;a href=&quot;https://spotbugs.github.io/&quot;&gt;SpotBugs&lt;/a&gt; Eclipse plugin, here are the links to the update sites: &lt;a href=&quot;http://spotbugs.readthedocs.io/en/latest/eclipse.html&quot;&gt;http://spotbugs.readthedocs.io/en/latest/eclipse.html&lt;/a&gt; and &lt;a href=&quot;https://marketplace.eclipse.org/content/spotbugs-eclipse-plugin&quot;&gt;Eclipse marketplace entry&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;We need your help&lt;/b&gt;!&lt;br /&gt;Please check if you see regressions and don't hesitate to report issues to the bug tracker!&lt;br /&gt;&lt;br /&gt;&lt;b&gt;SpotBugs links&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;Home: &lt;a href=&quot;https://spotbugs.github.io/&quot;&gt;https://spotbugs.github.io&lt;/a&gt;&lt;br /&gt;Mailing list: &lt;a href=&quot;https://github.com/spotbugs/discuss/issues?q=&quot;&gt;https://github.com/spotbugs/discuss/issues?q=&lt;/a&gt;&lt;br /&gt;Bug tracker: &lt;a href=&quot;https://github.com/spotbugs/spotbugs/issues&quot;&gt;https://github.com/spotbugs/spotbugs/issues&lt;/a&gt;&lt;br /&gt;Git repository: &lt;a href=&quot;https://github.com/spotbugs/spotbugs&quot;&gt;https://github.com/spotbugs/spotbugs&lt;/a&gt;&lt;br /&gt;Manual: &lt;a href=&quot;http://spotbugs.readthedocs.io/en/latest&quot;&gt;http://spotbugs.readthedocs.io/en/latest&lt;/a&gt;&lt;br /&gt;Migration guide: &lt;a href=&quot;http://spotbugs.readthedocs.io/en/latest/migration.html&quot;&gt;http://spotbugs.readthedocs.io/en/latest/migration.html&lt;/a&gt;&lt;br /&gt;Eclipse plugin nightly build: &lt;a href=&quot;https://spotbugs.github.io/eclipse-latest&quot;&gt;https://spotbugs.github.io/eclipse-latest&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;P.S.&lt;/b&gt;&lt;br /&gt;If you are curious about the history of &lt;a href=&quot;https://spotbugs.github.io/&quot;&gt;SpotBugs&lt;/a&gt; and why &lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt; isn't there anymore, please read through this mails:&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;&lt;a href=&quot;https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2016-November/004321.html&quot;&gt;https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2016-November/004321.html&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2017-September/004383.html&quot;&gt;https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2017-September/004383.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 17 Oct 2017 07:37:38 +0000</pubDate>
	<author>noreply@blogger.com (Andrey Loskutov)</author>
</item>
<item>
	<title>Donald Raab: Zip Symmetry</title>
	<guid isPermaLink="false">https://medium.com/p/a857a934ee26</guid>
	<link>https://medium.com/@donraab/zip-symmetry-a857a934ee26?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Another tale of &lt;a href=&quot;https://medium.com/@donraab/symmetric-sympathy-2c59d4541d60&quot;&gt;Symmetric Sympathy&lt;/a&gt; in the land of object and primitive collections.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qjrl-yuxEoiHXVvVj8sNqg.jpeg&quot; /&gt;Island of Balos, Crete&lt;/figure&gt;&lt;p&gt;I gave a talk this year at JavaOne titled &lt;strong&gt;&lt;em&gt;API Deep Dive: Designing Eclipse Collections&lt;/em&gt;&lt;/strong&gt; [CON6133] with Nikhil Nanivadekar. I really enjoyed this talk, as I got to recall twelve plus years of development in forty-five minutes. The slides are now available online &lt;a href=&quot;https://static.rainfocus.com/oracle/oow17/sess/1494212572063001UbJA/PF/JavaOne2017_CON6133_12_1507248789169001TA3b.pptx&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Symmetry continues to drive the design and implementation of new features in &lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt;. On slide 36 of the presentation (see below), I indicated where we are currently missing some symmetry between object and primitive collections.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/720/1*5NXdHfz7VnM3WyT-ZZ83IQ.png&quot; /&gt;Where is primitive eager zip?&lt;/figure&gt;&lt;p&gt;After returning home from JavaOne, I decided to spend Columbus Day implementing &lt;em&gt;zip&lt;/em&gt; for primitive eager lists in Eclipse Collections.&lt;/p&gt;&lt;h4&gt;What is zip?&lt;/h4&gt;&lt;p&gt;According to &lt;a href=&quot;https://en.wikipedia.org/wiki/Convolution_(computer_science)&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;In computer science, specifically formal languages, convolution (sometimes referred to as zip) is a function which maps a tuple of sequences into a sequence of tuples.&lt;/blockquote&gt;&lt;p&gt;To put this slightly differently, if you have two lists of objects, and you zip them together, you will wind up with a single list of pairs of objects.&lt;/p&gt;&lt;p&gt;Here’s an example of how you can use &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/list/ListIterable.html#zip-java.lang.Iterable-&quot;&gt;zip&lt;/a&gt; today in Eclipse Collections (EC) for object collections.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;String&amp;gt; one = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;);&lt;br /&gt;ImmutableList&amp;lt;String&amp;gt; two = Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;br /&gt;MutableList&amp;lt;Pair&amp;lt;String, String&amp;gt;&amp;gt; zipOneAndTwo = one.zip(two);&lt;br /&gt;ImmutableList&amp;lt;Pair&amp;lt;String, String&amp;gt;&amp;gt; zipTwoAndOne = two.zip(one);&lt;/pre&gt;&lt;p&gt;If we output &lt;em&gt;zipOneAndTwo&lt;/em&gt; and &lt;em&gt;zipTwoAndOne&lt;/em&gt; they look as follows:&lt;/p&gt;&lt;pre&gt;[1:one, 2:two, 3:three]&lt;br /&gt;[one:1, two:2, three:3]&lt;/pre&gt;&lt;p&gt;We can change the first list to &lt;em&gt;Integer&lt;/em&gt; objects like so.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;Integer&amp;gt; one = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3);&lt;br /&gt;ImmutableList&amp;lt;String&amp;gt; two = Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;br /&gt;MutableList&amp;lt;Pair&amp;lt;Integer, String&amp;gt;&amp;gt; zipOneAndTwo = one.zip(two);&lt;br /&gt;ImmutableList&amp;lt;Pair&amp;lt;String, Integer&amp;gt;&amp;gt; zipTwoAndOne = two.zip(one);&lt;/pre&gt;&lt;p&gt;We still get the same output, because of how &lt;em&gt;Pair&lt;/em&gt; defines &lt;em&gt;toString&lt;/em&gt;().&lt;/p&gt;&lt;pre&gt;[1:one, 2:two, 3:three]&lt;br /&gt;[one:1, two:2, three:3]&lt;/pre&gt;&lt;p&gt;I hate boxing ints as Integers. I’d like to be able to use an &lt;em&gt;IntList&lt;/em&gt; instead of a &lt;em&gt;List&lt;/em&gt; of &lt;em&gt;Integer&lt;/em&gt; objects. Previously in EC, we could not change the &lt;em&gt;MutableList&lt;/em&gt; of &lt;em&gt;Integer&lt;/em&gt; to a &lt;em&gt;MutableIntList&lt;/em&gt;. Now we can, but this new ability highlights a slight problem.&lt;/p&gt;&lt;pre&gt;MutableIntList one = IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3);&lt;br /&gt;ImmutableList&amp;lt;String&amp;gt; two = Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;one&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;three&quot;&lt;/strong&gt;);&lt;br /&gt;MutableList&amp;lt;IntObjectPair&amp;lt;String&amp;gt;&amp;gt; zipOneAndTwo = one.zip(two);&lt;/pre&gt;&lt;pre&gt;// The following code does not compile&lt;br /&gt;&lt;strong&gt;&lt;em&gt;ImmutableList&amp;lt;ObjectIntPair&amp;lt;String&amp;gt;&amp;gt; zipTwoAndOne = two.zip(one);&lt;/em&gt;&lt;/strong&gt;&lt;/pre&gt;&lt;p&gt;I have added a method zip to primitive lists with the following signature (&lt;em&gt;IntList&lt;/em&gt; used as an example below).&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Returns a {&lt;/em&gt;&lt;strong&gt;&lt;em&gt;@code &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;MutableList} formed from this {&lt;/em&gt;&lt;strong&gt;&lt;em&gt;@code &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;MutableIntList} and a {&lt;/em&gt;&lt;strong&gt;&lt;em&gt;@code &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;ListIterable} by&lt;br /&gt; * combining corresponding elements in pairs. If one of the two Lists is longer than the other, its&lt;br /&gt; * remaining elements are ignored.&lt;br /&gt; *&lt;br /&gt; * &lt;/em&gt;&lt;strong&gt;&lt;em&gt;@since &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;9.1.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;default &amp;lt;T&amp;gt; MutableList&amp;lt;IntObjectPair&amp;lt;T&amp;gt;&amp;gt; zip(ListIterable&amp;lt;T&amp;gt; list)&lt;/pre&gt;&lt;p&gt;We cannot (yet) zip an object list with a primitive list. By adding a feature in one direction (primitive+object), I have discovered (or created) a lack of symmetry in the other direction (object+primitive).&lt;/p&gt;&lt;h4&gt;One small step for a code generator…&lt;/h4&gt;&lt;p&gt;We can zip two object lists together regardless of the object type, so I wanted to at least be able to zip two int lists, two double lists, two short lists, etc. This is in addition to now being able to zip a primitive list with an object list. So the following signature is also included and code generated today (example below with &lt;em&gt;zipInt&lt;/em&gt; on &lt;em&gt;IntList&lt;/em&gt;). A method &lt;em&gt;zipDouble&lt;/em&gt; is also generated for &lt;em&gt;DoubleList&lt;/em&gt;, &lt;em&gt;zipFloat&lt;/em&gt; for &lt;em&gt;FloatList&lt;/em&gt;, etc. I used a naming pattern which will easily allow additional forms to be added later if there are use cases for them that surface.&lt;/p&gt;&lt;pre&gt;&lt;em&gt;/**&lt;br /&gt; * Returns a {&lt;/em&gt;&lt;strong&gt;&lt;em&gt;@code &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;MutableList} formed from this {&lt;/em&gt;&lt;strong&gt;&lt;em&gt;@code &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;MutableIntList} and another {&lt;/em&gt;&lt;strong&gt;&lt;em&gt;@code &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;IntList} by&lt;br /&gt; * combining corresponding elements in pairs. If one of the two {&lt;/em&gt;&lt;strong&gt;&lt;em&gt;@code &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;IntList}s is longer than the other, its&lt;br /&gt; * remaining elements are ignored.&lt;br /&gt; *&lt;br /&gt; * &lt;/em&gt;&lt;strong&gt;&lt;em&gt;@since &lt;/em&gt;&lt;/strong&gt;&lt;em&gt;9.1.&lt;br /&gt; */&lt;br /&gt;&lt;/em&gt;default MutableList&amp;lt;IntIntPair&amp;gt; zipInt(IntList list)&lt;/pre&gt;&lt;p&gt;Here’s an example zipping two &lt;em&gt;IntLists&lt;/em&gt; together using the method &lt;em&gt;zipInt&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;MutableIntList one = IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3);&lt;br /&gt;ImmutableIntList two = IntLists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(10, 20, 30);&lt;br /&gt;MutableList&amp;lt;IntIntPair&amp;gt; zipOneAndTwo = one.zipInt(two);&lt;br /&gt;ImmutableList&amp;lt;IntIntPair&amp;gt; zipTwoAndOne = two.zipInt(one);&lt;/pre&gt;&lt;p&gt;If I output both zipped lists the result is as follows:&lt;/p&gt;&lt;pre&gt;[1:10, 2:20, 3:30]&lt;br /&gt;[10:1, 20:2, 30:3]&lt;/pre&gt;&lt;p&gt;We can now zip eight forms of primitive lists to object lists today. We can also zip “like” forms of primitive lists as well (&lt;em&gt;IntList&lt;/em&gt;-&amp;gt;&lt;em&gt;zipInt&lt;/em&gt;, &lt;em&gt;DoubleList&lt;/em&gt;-&amp;gt;&lt;em&gt;zipDouble&lt;/em&gt;, etc.). I am hopeful that this functionality will satisfy most needs for the foreseeable future.&lt;/p&gt;&lt;h4&gt;The North Remembers&lt;/h4&gt;&lt;p&gt;Symmetry does not forget, and when it is missing and needed, developers will not always easily forgive. Achieving perfect symmetry for the sake of symmetry itself is a fool’s errand. If you find yourself in the position of needing more symmetry in this space, remember &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Eclipse Collections is open source&lt;/a&gt;. You can put in a request and perhaps someone may implement it on your behalf, but the quickest way to completion may be getting actively involved in the Eclipse Collections community and making a contribution. We will make sure you get all the help you need if you are interested in contributing.&lt;/p&gt;&lt;h4&gt;The sequel?&lt;/h4&gt;&lt;p&gt;We have zip today in Eclipse Collections but we do not yet have its natural opposite: &lt;em&gt;unzip&lt;/em&gt;. Unzip would take a list of pairs, return a pair of lists. Unzip only makes sense on the object collection side, because you can only unzip a list of pairs. Sounds easy right? Unzip winds up more complex to define with primitives now supported in zip. If you have a &lt;em&gt;List&lt;/em&gt; of &lt;em&gt;Pair&lt;/em&gt;, you will get back a &lt;em&gt;Pair&lt;/em&gt; of &lt;em&gt;Lists&lt;/em&gt;. If you have a &lt;em&gt;List&lt;/em&gt; of &lt;em&gt;ObjectIntPair&lt;/em&gt;, you would want to get back a &lt;em&gt;Pair&lt;/em&gt; of &lt;em&gt;List&lt;/em&gt; and &lt;em&gt;IntList&lt;/em&gt;… and so on. The return type for unzip will be tricky to define, at least without complicating the API, which should require no parameters. I think we should wait a while before trying to solve this symmetry problem. However, there is a pattern which would be very nice to have, and may make using zip less attractive once we do have it. This pattern is &lt;strong&gt;&lt;em&gt;collectWithIndex&lt;/em&gt;&lt;/strong&gt;. We have &lt;strong&gt;&lt;em&gt;forEachWithIndex&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;injectIntoWithIndex&lt;/em&gt;&lt;/strong&gt; (primitive only) today. Oh, no... Stay tuned.&lt;/p&gt;&lt;p&gt;I hope this latest chapter in my tale of Symmetric Sympathy was interesting and informative.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=a857a934ee26&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 13 Oct 2017 17:31:16 +0000</pubDate>
</item>

</channel>
</rss>
